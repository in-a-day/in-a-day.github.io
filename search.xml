<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树的遍历</title>
      <link href="2021/06/03/algorithm/tree/tree_traversal/"/>
      <url>2021/06/03/algorithm/tree/tree_traversal/</url>
      
        <content type="html"><![CDATA[<p>树的遍历主要分为两种: 深度优先和层次遍历.</p><h3 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a><strong>深度优先</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/algorithm/binary_tree_traversal.svg.png" alt="BinaryTreeTraversal" loading="lazy"><em><strong>二叉树深度优先遍历</strong></em></p><p>树的深度优先遍历主要分为以下三种:</p><ul><li>前序遍历: 先访问根节点, 再访问左子树, 最后访问右子树, 图中红色点的遍历顺序</li><li>中序遍历: 先访问左子树, 再访问根节点, 左后访问右子树, 图中绿色点的遍历顺序</li><li>后序遍历: 先访问左子树, 再访问右子树, 最后访问根节点, 图中蓝色点的遍历顺序</li></ul><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a><strong>前序遍历</strong></h4><p>访问顺序: 根 –&gt; 左 –&gt; 右</p><p>递归方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代方式, 使用栈进行模拟, 由于栈是先进后出, 所以先将右子树放入栈中, 再放入左子树:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问节点</span>        <span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><strong>中序遍历</strong></h4><p>访问顺序: 左 –&gt; 根 –&gt; 右</p><p>递归方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代方式, 由于需要先访问左子树, 所以先一直遍历左子树, 放入栈中, 不存在时, 遍历右子树:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a><strong>后续遍历</strong></h4><p>遍历顺序: 左 –&gt; 右 –&gt; 根</p><p>递归方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代方式, 由于后序遍历需要最后访问根节点, 所以会有重复访问的问题, 需要设置一个变量保存上次访问的节点, 避免重复访问:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">,</span> peek<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            peek <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果当前节点存在右子节点, 且并没有访问过该右子节点, 将该节点加入栈中</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>peek<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> peek<span class="token punctuation">.</span>right <span class="token operator">!=</span> lastVisited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>peek<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 否则不存在右子节点, 或者是上次访问的是该右子节点, 直接访问当前节点</span>                <span class="token comment">// 同时缓存访问节点</span>                <span class="token function">visit</span><span class="token punctuation">(</span>peek<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastVisited <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a><strong>层次遍历</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/algorithm/binary_tree_level_traversal.svg.png" alt="BinaryTreeLevelTraversal" loading="lazy"><em><strong>二叉树层次遍历</strong></em></p><p>遍历顺序: 按照每一层依次遍历.</p><p>迭代方式: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 使用队列保存节点, 先进先出</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代且使用层级:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> levelLength<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// levelLength: 每层节点个数</span>        levelLength <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>levelLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            levelLength<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归方式: 并不是真正按照层次遍历, 而是使用 DFS模拟层次(出自<a href="https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/33445/Java-Solution-using-DFS">https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/33445/Java-Solution-using-DFS</a>):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">levelHelper</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelHelper</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// height代表当前节点所属的层级, size()用于判断当前节点层级是否已经存在于res中</span>    <span class="token comment">// 例如树为[1,2,3], 根节点1进入后, 递归left和right传入的height为1, 在left中会添加LinkedList, 此时size()变为2, 所以之后遍历right时, 不会继续添加新的LinkedList</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">>=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">levelHelper</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">levelHelper</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><ul><li>wiki: <a href="https://en.wikipedia.org/wiki/Tree_traversal">https://en.wikipedia.org/wiki/Tree_traversal</a></li><li>leetcode: <a href="https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/33445/Java-Solution-using-DFS">https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/33445/Java-Solution-using-DFS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="2021/05/25/algorithm/tree/tree/"/>
      <url>2021/05/25/algorithm/tree/tree/</url>
      
        <content type="html"><![CDATA[<p>树由有限个节点组成.</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>根节点: 没有父节点的节点.</li><li>节点的度: 一个节点含有子树的个数.</li><li>树的度: 最大节点度即树的度.</li><li>叶子节点: 度为0的节点</li><li>分支节点: 度不为0的节点</li><li>深度: 节点到根节点的路径长度, 根节点深度为0</li><li>高度: 节点到叶子节点的最长路径, 叶子节点高度为0</li></ul><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树的每个节点最多包含两个分支, 即每个节点的度都不大于2.</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质:"></a>性质:</h4><ul><li>二叉树的第i层最多包含$2^{i-1}$个节点</li><li>深度为k的二叉树最多有$2^{k+1} - 1$个节点.</li><li>如果叶子节点的数有a个, 度为2的节点数有b个, 那么a = b + 1</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>常用的遍历方式有两种:</p><ul><li>深度优先遍历(dfs)</li><li>层级遍历(广度优先遍历-bfs)</li></ul><h3 id="常见的题目类型"><a href="#常见的题目类型" class="headerlink" title="常见的题目类型"></a>常见的题目类型</h3><h4 id="最大路径等返回单个值"><a href="#最大路径等返回单个值" class="headerlink" title="最大路径等返回单个值"></a>最大路径等返回单个值</h4><h4 id="路径和等返回完整路径"><a href="#路径和等返回完整路径" class="headerlink" title="路径和等返回完整路径"></a>路径和等返回完整路径</h4>]]></content>
      
      
      <categories>
          
          <category> tree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑距离</title>
      <link href="2021/05/10/algorithm/dp/72_edit_distance/"/>
      <url>2021/05/10/algorithm/dp/72_edit_distance/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-72"><a href="#题目-leetcode-72" class="headerlink" title="题目(leetcode-72)"></a>题目(<a href="https://leetcode.com/problems/edit-distance/">leetcode-72</a>)</h2><p>给定两个单词 <code>word1</code> 和<code>word2</code>, 返回将 <code>word1</code> 转换为<code>word2</code>需要的最少操作数.</p><p>一共可以使用以下操作:</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: word1 &#x3D; &quot;horse&quot;, word2 &#x3D; &quot;ros&quot;Output: 3Explanation: horse -&gt; rorse (替换 &#39;h&#39; 为 &#39;r&#39;)rorse -&gt; rose (删除 &#39;r&#39;)rose -&gt; ros (删除 &#39;e&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: word1 &#x3D; &quot;intention&quot;, word2 &#x3D; &quot;execution&quot;Output: 5Explanation: intention -&gt; inention (删除 &#39;t&#39;)inention -&gt; enention (替换 &#39;i&#39; 为 &#39;e&#39;)enention -&gt; exention (替换 &#39;n&#39; 为 &#39;x&#39;)exention -&gt; exection (替换 &#39;n&#39; 为 &#39;c&#39;)exection -&gt; execution (插入 &#39;u&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先定义一个函数dp(i, j)为将word1[i:]转换为word2[j:]所需要的最少操作数. </p><p>那么现在的问题就是如何得到dp(i, j):</p><ul><li><p>如果word1[i] == word2[j], 那么代表当前字符已经相同, 则dp(i,j) = dp(i-1, j-1)</p></li><li><p>如果word1[i] != word2[j], 那么根据题目所给的操作, 我们有以下三个操作可以使用, 并使用三个步骤中需要的最少的操作数:</p><ul><li>删除word1[i], 此时比较word1[i - 1]与word2[j]</li><li>替换word1[i], 此时比较word1[i - 1]与word2[j - 1]</li><li>插入word2[j], 此时word1中新插入的元素与word2[j]已经相同, 所以需要比较word1[i]与word2[j - 1]</li></ul></li><li><p>接着是基本情况:</p><ul><li>如果word1为空, 那么需要插入所有word2的字符</li><li>如果word2为空, 那么需要删除所有word1的字符</li></ul></li></ul><h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><p>首先使用递归的解法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> me <span class="token operator">:</span> memo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>word1<span class="token punctuation">,</span> word2<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">recursion</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">min</span><span class="token punctuation">(</span>                <span class="token function">recursion</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token function">recursion</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token function">recursion</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2021/05/09/algorithm/dp/dp/"/>
      <url>2021/05/09/algorithm/dp/dp/</url>
      
        <content type="html"><![CDATA[<p>动态规划主要解决具有最优子结构的问题. 通过解决子问题来解决原始问题.</p><p>其实dp类似于暴力求解, 通过memo进行优化时间复杂度.</p><p>大致可以分为以下步骤:</p><ul><li>如何定义子问题, 这也是最难的一步</li><li>如何由子问题解决原问题, 通常称为状态转移方程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security Authorization(授权)(5.4.5)</title>
      <link href="2021/04/28/spring/spring-security/spring_security_authorization/"/>
      <url>2021/04/28/spring/spring-security/spring_security_authorization/</url>
      
        <content type="html"><![CDATA[<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>abstract security interceptor</p><p>access decision manager</p><p>after invocation handler</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security杂记</title>
      <link href="2021/04/26/nichijou/SpringSecurity/"/>
      <url>2021/04/26/nichijou/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<p>TODO 异常处理:</p><ol><li></li></ol><h4 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h4><p>授权主要是经由AccessDecisionManager决定. 通过委派给AccessDecisionVoter链实现授权管理. 有点类似与ProviderManager委派AuthenticationProvider链进行认证.</p><p>AccessDecisionManager主要有三个实现:</p><ol><li>AffirmativeBased: 只要存在投票器通过就通过</li><li>ConsensusBased: 根据投票器通过和拒绝的票数决定是否通过</li><li> 所有的投票器都通过才通过</li></ol><ol><li><p>AccessDecisionManager:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * authentication是认证后的认证信息, 即SecurityContext中的Authentication * object是受保护的对象 * configAttributes是与被保护对象相关的一些配置属性 */</span><span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> configAttributes<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientAuthenticationException</span><span class="token punctuation">;</span> <span class="token comment">// 是否支持attribute对象</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否支持给定class类型的受保护对象进行投票</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>投票器: AccessDecisionVoter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionVoter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ACCESS_GRANTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ACCESS_ABSTAIN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ACCESS_DENIED <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">ConfigAttribute</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">,</span> <span class="token class-name">S</span> object<span class="token punctuation">,</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigAttribute</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> OAuth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT-Json Web Token</title>
      <link href="2021/04/24/spring/spring-security/jwt/"/>
      <url>2021/04/24/spring/spring-security/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT-Json-Web-Token"><a href="#JWT-Json-Web-Token" class="headerlink" title="JWT: Json Web Token"></a><strong>JWT: Json Web Token</strong></h2><blockquote><p>JWT 定义了紧凑且自包含的方式在实体间进行安全信息传输. JWT使用数字签名来保证传输的信息可以被验证并且保证其可信. JWT可以使用私钥(HMAC算法)进行签名, 或者使用RSA/ECDSA的公私钥进行签名.</p></blockquote><h3 id="JWT使用场景"><a href="#JWT使用场景" class="headerlink" title="JWT使用场景"></a><strong>JWT使用场景</strong></h3><ul><li>授权(Authorization): 这是JWT最常用的场景. 使用JWT可以替代常用的cookie-session模式.</li><li>信息交换: 在实体间进行安全的传输信息</li></ul><h3 id="JWT结构"><a href="#JWT结构" class="headerlink" title="JWT结构"></a><strong>JWT结构</strong></h3><p>在JWT的紧凑形式中, JWT由三部分组成, 且每个部分之间使用<code>.</code>分隔. 以下是三个部分:</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>JWT通常是以下的形式: <code>xxxxx.yyyyy.zzzzz</code></p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a><strong>Header</strong></h4><p>JWT第一部分是header, header通常由两部分组成:</p><ul><li>token的类型, 即JWT</li><li>使用的签名算法, 例如: HMAC</li></ul><p>以下是header的一个例子:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着使用Base64Url编码上述的json作为JWT的第一部分.</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a><strong>Payload</strong></h4><p>JWT的第二部分是payload, payload中包含了claims. claims通常是一些实体(通常是用户)和其他数据的声明. claims有三种类型: registered, public, private.</p><ul><li>Registered claims: 一些预定义的claims. 常用的有以下: iss(issuer), exp(expiration time), sub(subject), aud(audience)</li><li>Public claims: 可以由使用JWT的人任意定义. 但是要避免冲突.</li><li>Private claims: 自定义的claims. 由信息传输实体间协商好的的数据. 通俗来讲就是前后端约定的一些属性, 比如使用<code>uname</code>来存储用户名.</li></ul><p>payload的一个例子:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hh"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Base64Url编码payload的json并作为JWT的第二部分.</p><p><strong>NB: 尽管JWT可以通过签名防止篡改, 但是payload对任何人来说都是可读的(因为只是使用了Base64Url进行编码). 如果需要存放敏感信息, 则可以先对信息加密, 再放入payload中.</strong></p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a><strong>Signature</strong></h4><p>JWT的第三部分是signature. 在创建signature之前, 必须确保存在编码后的header, 编码后的payload, secret(加密的key), 然后使用在header中指定的加密算法进行签名. </p><p>例如是哟HMAC SHA256加密算法, 将会以以下方式创建signature: </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">HMACSHA256(base64UrlEncode(header) + &#39;.&#39; + base64UrlEncode(payload),secret)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>signature用于保证消息在传输过程中没有被更改.</p><h3 id="Java-JJwt使用"><a href="#Java-JJwt使用" class="headerlink" title="Java JJwt使用"></a><strong>Java JJwt使用</strong></h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>JWT官网: <a href="https://jwt.io/introduction">https://jwt.io/introduction</a></p></li><li><p>JJwt: <a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring security </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-04-23日</title>
      <link href="2021/04/23/nichijou/daily/2021-04-23/"/>
      <url>2021/04/23/nichijou/daily/2021-04-23/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>首先是问了一下最近项目的主要内容是什么, 负责什么. 这一块回答的并不是很好, 还是需要再提炼一下语言.</li><li>问了一下对sql调优的经验.</li><li>问了一下性能缓慢如何定位的问题.</li><li>说说对Spring Ioc和Aop的理解. 在工作中是怎么运用的.</li><li>对多线程了解吗. 只问了wait和join的区别.</li><li>redis使用过吗, 说说你对redis的了解. 回答了redis的持久化机制, 只记住了aof的名称, rdb的名称忘了, 但是回答了这两个的基本运行机制.</li><li>问了一下生产如何进行问题定位. 回答了没有深入了解… 真是惨.</li><li>最后还反问了我有什么想问他的吗.</li></ol>]]></content>
      
      
      <categories>
          
          <category> nichijou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nichijou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-04-22日</title>
      <link href="2021/04/22/nichijou/daily/2021-04-22/"/>
      <url>2021/04/22/nichijou/daily/2021-04-22/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天接受了一个面试, 从感觉上来说应该是一个普通的开发人员进行的一面, 而不是技术组长, 因为面试的问题都比较浅显, 但是还是发现了自己的一些不足之处.</p><ol><li>首先是问了一下最近项目的主要内容是什么, 负责什么. 这一块回答的并不是很好, 还是需要再提炼一下语言.</li><li>问了一下对sql调优的经验.</li><li>问了一下性能缓慢如何定位的问题.</li><li>说说对Spring Ioc和Aop的理解. 在工作中是怎么运用的.</li><li>对多线程了解吗. 只问了wait和join的区别.</li><li>redis使用过吗, 说说你对redis的了解. 回答了redis的持久化机制, 只记住了aof的名称, rdb的名称忘了, 但是回答了这两个的基本运行机制.</li><li>问了一下生产如何进行问题定位. 回答了没有深入了解… 真是惨.</li><li>最后还反问了我有什么想问他的吗.</li></ol>]]></content>
      
      
      <categories>
          
          <category> nichijou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nichijou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-04-12日</title>
      <link href="2021/04/12/nichijou/daily/2021-04-12/"/>
      <url>2021/04/12/nichijou/daily/2021-04-12/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> 了解OAuth2基本概念</li><li><input disabled="" type="checkbox"> 优先队列实现</li><li><input disabled="" type="checkbox"> 排序算法<ul><li><input disabled="" type="checkbox"> 插入排序</li><li><input disabled="" type="checkbox"> 归并排序</li><li><input disabled="" type="checkbox"> 快速排序</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> nichijou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nichijou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-04-11日</title>
      <link href="2021/04/11/nichijou/daily/2021-04-11/"/>
      <url>2021/04/11/nichijou/daily/2021-04-11/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> 了解OAuth2基本概念</li><li><input disabled="" type="checkbox"> 优先队列实现</li><li><input disabled="" type="checkbox"> 排序算法<ul><li><input disabled="" type="checkbox"> 插入排序</li><li><input disabled="" type="checkbox"> 归并排序</li><li><input disabled="" type="checkbox"> 快速排序</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> nichijou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nichijou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2介绍</title>
      <link href="2021/04/11/oauth/oauth2/"/>
      <url>2021/04/11/oauth/oauth2/</url>
      
        <content type="html"><![CDATA[<h2 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h2><blockquote><p>OAuth2是一个授权框架, 允许第三方应用受限获取用户数据.</p></blockquote><h3 id="角色-Roles"><a href="#角色-Roles" class="headerlink" title="角色(Roles)"></a>角色(Roles)</h3><p>OAuth定义了4中角色:</p><ul><li>resource owner<br>能够授权访问受保护资源的实体, 通常是一个用户.</li><li>resource server<br>存储受保护资源的服务器, 可以使用访问令牌(access token)接收和响应受保护资源的请求.</li><li>client<br>代表资源所有者和其授权, 对受保护资源发出请求的应用程序. 通常的例子是一个浏览器, 或者是后端服务器.</li><li>authorization server<br>在成功认证资源所有者并获取授权后, 向客户端发送access token的服务器.</li></ul><h3 id="协议流-Protocol-Flow"><a href="#协议流-Protocol-Flow" class="headerlink" title="协议流(Protocol Flow)"></a>协议流(Protocol Flow)</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">+--------+                               +---------------+|        |--(A)- Authorization Request -&gt;|   Resource    ||        |                               |     Owner     ||        |&lt;-(B)-- Authorization Grant ---|               ||        |                               +---------------+|        ||        |                               +---------------+|        |--(C)-- Authorization Grant --&gt;| Authorization || Client |                               |     Server    ||        |&lt;-(D)----- Access Token -------|               ||        |                               +---------------+|        ||        |                               +---------------+|        |--(E)-----Access Token  ------&gt;|    Resource   ||        |                               |     Server    ||        |&lt;-(F)--- Protected Resource ---|               |+--------+                               +---------------+ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上协议流描述了OAuth2中四种角色的交互:</p><ul><li>A: 客户端向Resource Owner请求授权. 授权请求可以直接向resource owner进行请求, 也可以通过授权服务器作为中介进行请求, 通常使用后者. </li><li>B: 客户端接收到资源所有者的授权许可, 该授权许可是可以代表资源所有者的授权的凭证, 使用四种授权类型之一或拓展的授权类型表示. 授权类型取决于客户端请求授权使用的方法和授权服务器支持的类型.</li><li>C: 客户端使用B中接受的授权许可向授权服务器请求访问令牌.</li><li>D: 授权服务器验证客户端的授权许可, 如果通过, 返回访问令牌.</li><li>E: 客户端使用访问令牌向资源服务器请求资源.</li><li>F: 资源服务器验证访问令牌, 如果通过, 返回请求资源.</li></ul><h3 id="授权许可-Authorization-Grant"><a href="#授权许可-Authorization-Grant" class="headerlink" title="授权许可(Authorization Grant)"></a>授权许可(Authorization Grant)</h3><blockquote><p>授权许可是代表资源所有者的授权(获取资源所有者受保护的资源)的凭证, 用于客户端获取访问令牌.<br>Oauth2规范定义了四种授权类型:</p></blockquote><ul><li>授权码: authorization code</li><li>隐式: implicit</li><li>资源所有者密码凭证: resource owner password credentials</li><li>客户端凭证: client credentials</li></ul><p>除此之外, 定义了一个用于其他类型的拓展机制.</p><h4 id="授权码-Authorization-Code"><a href="#授权码-Authorization-Code" class="headerlink" title="授权码(Authorization Code)"></a>授权码(Authorization Code)</h4><p>授权码通过使用授权服务器作为客户端与资源所有者之间的中介获取的. 客户端不直接从资源所有者获取授权, 而是将资源所有者定向到授权服务器, 然后授权服务器将携带授权码的资源所有者返回到客户端.</p><p>在将携带授权码的资源所有者返回到客户端之前, 资源服务器会资源所有者进行验证并获取授权. 因为资源所有者仅和授权服务器进行交互验证, 所以资源所有者的凭证不会与客户端共享.</p><p>例如我们调用github进行第三方登录, 用户只需要在github服务器进行验证授权, 客户端不会得到用户的密码, 仅会得到github返回的访问令牌.</p><h4 id="隐式-Implicit"><a href="#隐式-Implicit" class="headerlink" title="隐式(Implicit)"></a>隐式(Implicit)</h4><p>隐式授权应用于客户端是浏览器(使用JavaScript等语言实现)的情况. 在隐式授权流中, 不向客户端颁发授权码, 而是直接向客户端颁发访问令牌. 授权类型是隐式的, 因为没有颁发任何中间凭证(不使用授权码获取访问令牌).</p><h4 id="密码凭证-Resource-Owner-Password-Credentials"><a href="#密码凭证-Resource-Owner-Password-Credentials" class="headerlink" title="密码凭证(Resource Owner Password Credentials)"></a>密码凭证(Resource Owner Password Credentials)</h4><p>密码凭证, 即直接使用用户名密码作为认证许可去获取访问令牌. </p><p>通常在客户端和授权服务器是同一组织维护的时候使用这种方式. 假设我们使用前后端分离开发, 如果使用授权码方式, 那么用户首先从我们的系统重定向到我们编写的授权服务器(如果使用授权码方式的话), 这种方式还是比较奇怪的.</p><h4 id="客户端凭证-Client-Credentials"><a href="#客户端凭证-Client-Credentials" class="headerlink" title="客户端凭证(Client Credentials)"></a>客户端凭证(Client Credentials)</h4><p>客户端以自己的名义, 而不是以用户的名义, 向授权服务器进行认证.</p>]]></content>
      
      
      <categories>
          
          <category> OAuth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security认证流程</title>
      <link href="2021/04/11/spring/spring-security/spring_security_flow/"/>
      <url>2021/04/11/spring/spring-security/spring_security_flow/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security-流程"><a href="#Spring-Security-流程" class="headerlink" title="Spring Security 流程"></a>Spring Security 流程</h2><ol><li><p>首先Spring Security是通过一个filter进行拦截的, 起始Spring Security内部也会有FilterChain, 但是只暴露出了DelegatingFilterProxy(代理类)去执行</p></li><li><p>通过DelegatingFilterProxy代理真正的Filter进行拦截</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/delegatingfilterproxy.png" alt="DelegatingFilterProxy" loading="lazy"></p></li><li><p>Spring Security内部使用FilterChainProxy(FilterChain代理类)去执行SecurityFilterChain, FilterChainProxy是一个特殊的Filter, 交由DelegatingFilterProxy进行代理.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/filterchainproxy.png" alt="FilterChainProxy" loading="lazy"></p><p>FilterChainProxy提供了3个构造方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">(</span><span class="token class-name">SecurityFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityFilterChain</span><span class="token punctuation">></span></span> filterChains<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterChains <span class="token operator">=</span> filterChains<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从构造方法中可以看出, FilterChainProxy是支持多个SecurityFilterChain的. 再看一下FilterChainProxy是如何实现默认Filter中的doFilter方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> clearContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clearContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RequestRejectedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestRejectedHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以看出其内部是调用了doFilterInternal方法, 如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 这里首先经过Spring Security的防火墙判断</span><span class="token class-name">FirewalledRequest</span> firewallRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firewall<span class="token punctuation">.</span><span class="token function">getFirewalledRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletResponse</span> firewallResponse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firewall<span class="token punctuation">.</span><span class="token function">getFirewalledResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 重点: 获取所有的Filter, 本质上就是获取一个SpringFilterChain中的所有Filter</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">></span></span> filters <span class="token operator">=</span> <span class="token function">getFilters</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>filters <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"No security for "</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>firewallRequest<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"Securing "</span> <span class="token operator">+</span> <span class="token function">requestLine</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">VirtualFilterChain</span> virtualFilterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VirtualFilterChain</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> filters<span class="token punctuation">)</span><span class="token punctuation">;</span>virtualFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>firewallRequest<span class="token punctuation">,</span> firewallResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下getFilters如何去获取Filters:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">></span></span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 首先遍历注册的SecurityFilterChain</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityFilterChain</span> chain <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filterChains<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Trying to match request against %s (%d/%d)"</span><span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterChains<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// 调用chain的matches方法, 如果匹配了, 就返回, 从这里也可以看出只有一条SecurityFilterChain会执行. 并且这个匹配是按顺序来了, 所以添加SecurityFilterChain的顺序也十分重要.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 返回该SecurityFilterChain中所有Filter</span><span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从getFilters方法中我们很容易可以得到以下结论: 最多只有一个SecurityFilterChain会执行.最后在doFilterInternal方法中调用Filter的doFilter方法.</p><p>总结以下FilterChainProxy的流程:</p><ol><li>通过构造参数传入SecurityFilterChain</li><li>匹配需要执行的SecurityFilterChain, 只可能是没有或是1个</li><li>执行SecurityFilterChain中Filter</li></ol><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/multi-securityfilterchain.png" alt="Multiple SecurityFilterChain" loading="lazy"></p><p>由于FilterChainProxy是Spring Security中真正的执行入口, 所以debug的时候可以在该类中打断点.</p></li><li><p>接下来看一下SecurityFilterChain(FilterChain接口), 该接口主要定义了以下两个方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityFilterChain</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">></span></span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>matches用于匹配是否满足执行该FilterChain的条件</p><p>getFilters获取该FilterChain中的所有Filter</p><p>在FilterChainProxy中的getFilters方法就是调用了以上两个方法进行判断并获取Filters.</p></li><li><p>总结一下SS的Filter流程</p><ol><li>FilterChainProxy交由DelegatingFilterProxy代理, 最终由DelegatingFilterProxy充当一个普通的Servlet Filter. </li><li>通过FilterChainProxy去决定执行哪一个SecurityFilterChain</li><li>SecurityFilterChain中定义需要执行的Filter</li></ol></li></ol><h3 id="Spring-Security中常见的Filter"><a href="#Spring-Security中常见的Filter" class="headerlink" title="Spring Security中常见的Filter"></a>Spring Security中常见的Filter</h3><h4 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a>SecurityContextPersistenceFilter</h4><blockquote><p>该Filter主要用于设置SecurityContextHoler, 即将SecurityContext属性写入SecurityContextHolder中. 同时也在请求结束后清空SecurityContextHolder.</p></blockquote><p>下面看一下该Filter的doFilter方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token comment">// ensure that filter is only applied once per request</span>   <span class="token comment">// 确保每个请求只应用该filter一次</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forceEagerSessionCreation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Created session %s eagerly"</span><span class="token punctuation">,</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// HttpRequestResponseHolder只是简单存储了HttpServletRequest和HttpServletResponse</span><span class="token class-name">HttpRequestResponseHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestResponseHolder</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 使用SecurityContextRepository从holder中获取SecurityContext</span><span class="token class-name">SecurityContext</span> contextBeforeChainExecution <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">loadContext</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 设置线程私有的SecurityContext. SecurityContextHolder默认使用ThreadLocal对象去存储SecurityContext</span>     <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextBeforeChainExecution<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>contextBeforeChainExecution<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Set SecurityContextHolder to empty SecurityContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Set SecurityContextHolder to %s"</span><span class="token punctuation">,</span> contextBeforeChainExecution<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// 之后执行下游的filter</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 在每次请求结束之后清空SecurityContext, 防止泄露</span><span class="token class-name">SecurityContext</span> contextAfterChainExecution <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Crucial removal of SecurityContextHolder contents before anything else.</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">saveContext</span><span class="token punctuation">(</span>contextAfterChainExecution<span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>FILTER_APPLIED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Cleared SecurityContextHolder to complete request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上doFilter看来, 主要有以下关键点:</p><ol><li><p>HttpRequestResponseHolder, 该类主要存储了请求的HttpServletRequest和HttpServletResponse:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpRequestResponseHolder</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HttpRequestResponseHolder</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">HttpServletResponse</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码可以看出只是保存了两个属性: HttpServletRequest和HttpServletResponse.</p></li><li><p>使用SecurityContextRepository从HttpRequestResponseHolder加载SecurityContext:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContextRepository</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取给定请求的SecurityContext. 对于未认证的用户来说, 应该返回一个空的context实现. 这个方法不应该返回null;</span><span class="token class-name">SecurityContext</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestResponseHolder</span> requestResponseHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在完成的请求中存储SecurityContext</span><span class="token keyword">void</span> <span class="token function">saveContext</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span> context<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// repository查询自身是否包含当前请求的一个SecurityContext</span><span class="token keyword">boolean</span> <span class="token function">containsContext</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h3><blockquote><p>处理身份验证表单提交. 登录表单中必须存在两个参数: username和password. 默认的参数名称是username和password. 可以通过setUsernameParameter和setPasswordParameter方法修改默认名称.</p><p>该Filter默认会响应/login页面.</p></blockquote><p>看一下该类中的默认属性, 从属性中我们可以看出为什么默认是username和password:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里就是默认的username和password名称</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SPRING_SECURITY_FORM_USERNAME_KEY <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SPRING_SECURITY_FORM_PASSWORD_KEY <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token comment">// 这里设置了默认的响应login页面POST方法.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AntPathRequestMatcher</span> DEFAULT_ANT_PATH_REQUEST_MATCHER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里就是默认的username和password名称, 所以可以通过这两个属性的set方法修改</span><span class="token keyword">private</span> <span class="token class-name">String</span> usernameParameter <span class="token operator">=</span> SPRING_SECURITY_FORM_USERNAME_KEY<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> passwordParameter <span class="token operator">=</span> SPRING_SECURITY_FORM_PASSWORD_KEY<span class="token punctuation">;</span><span class="token comment">// 默认只是POST方法</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> postOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 从request中获取密码</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>passwordParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从request中获取用户名</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>usernameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一下UsernamePasswordAuthenticationFilter的doFilter方法(该类继承自AbstractAuthenticationFilter, 默认使用了父类的doFilter方法):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 如果不需要身份认证, 执行下游Filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requiresAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 真正执行认证的方法</span><span class="token class-name">Authentication</span> authenticationResult <span class="token operator">=</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回null代表需要进一步认证</span><span class="token keyword">if</span> <span class="token punctuation">(</span>authenticationResult <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// return immediately as subclass has indicated that it hasn't completed</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sessionStrategy<span class="token punctuation">.</span><span class="token function">onAuthentication</span><span class="token punctuation">(</span>authenticationResult<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 认证成功, 判断是否需要继续执行下游Filter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>continueChainBeforeSuccessfulAuthentication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">successfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> authenticationResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> failed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"An internal error occurred while trying to authenticate the user."</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Authentication failed</span><span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面具体看一下attemptAuthentication方法执行流程:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>postOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"Authentication method not supported: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 从request中获取username和password</span><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>username <span class="token operator">=</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> username <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>password <span class="token operator">=</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> password <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment">// 创建认证令牌, 此时尚未开始认证</span><span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Allow subclasses to set the "details" property</span>   <span class="token comment">// 默认是在authRequest中设置一些details: request中的remoteAddress和sessionId</span><span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 交由AuthenticationManager进行认证, 通常是使用ProviderManager, ProviderManager中通常有一系列的AuthenticationProvider, 最终交由这些Provider进行验证, 只要有一个Provider验证通过就通过. 如果没有通过, 使用ProviderManager的父AuthenticationManager进行验证(如果存在的话).</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><blockquote><p>用于处理Spring Security中的异常, 将AccessDeniedException和AuthenticalException异常转换为HTTP响应.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/exceptiontranslationfilter.png" alt="ExceptionTranslationFilter" loading="lazy"></p><p>看一下该Filter的doFilter方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 调用下游的Filter</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 如果是IO异常直接抛出</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Try to extract a SpringSecurityException from the stacktrace</span><span class="token class-name">Throwable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> causeChain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwableAnalyzer<span class="token punctuation">.</span><span class="token function">determineCauseChain</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 判断异常是否存在AuthenticaitonException或AccessDeniedException</span><span class="token class-name">RuntimeException</span> securityException <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwableAnalyzer<span class="token punctuation">.</span><span class="token function">getFirstThrowableOfType</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> causeChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>securityException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>securityException <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>throwableAnalyzer<span class="token punctuation">.</span><span class="token function">getFirstThrowableOfType</span><span class="token punctuation">(</span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> causeChain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// 如果不是上述两个异常直接抛出</span><span class="token keyword">if</span> <span class="token punctuation">(</span>securityException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">rethrow</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"Unable to handle the Spring Security Exception "</span><span class="token operator">+</span> <span class="token string">"because the response is already committed."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// 处理上述两个异常</span><span class="token function">handleSpringSecurityException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> securityException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, 该类调用handleSpringSecurityException进行处理这两个异常:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleSpringSecurityException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">RuntimeException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleAuthenticationException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">handleAccessDeniedException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先看一下处理handleAuthenticationException(认证异常)异常:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleAuthenticationException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Sending to authentication entry point since authentication failed"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sendStartAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终调用了sendStartAuthentication:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sendStartAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span>      <span class="token class-name">AuthenticationException</span> reason<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// SEC-112: Clear the SecurityContextHolder's Authentication, as the</span>   <span class="token comment">// existing Authentication is no longer considered valid</span>   <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>requestCache<span class="token punctuation">.</span><span class="token function">saveRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationEntryPoint<span class="token punctuation">.</span><span class="token function">commence</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先清空SecurityContextHolder, 然后将<code>HttpServletRequest</code>保存到<code>RequestCache</code>中. 当用户成功认证后, 将<code>RequestCache</code>内容重播原始request. 最后使用<code>AuthenticationEntryPoint</code>从客户端请求凭证(credential).可能重定向到登录页面或者发送一个<code>WWW-Authenticat</code>头部(header).</p><p>最后看一下handleAccessDeniedException(访问异常):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleAccessDeniedException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isAnonymous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isAnonymous</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isAnonymous <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationTrustResolver<span class="token punctuation">.</span><span class="token function">isRememberMe</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Sending %s to authentication entry point since access is denied"</span><span class="token punctuation">,</span>authentication<span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sendStartAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">InsufficientAuthenticationException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"ExceptionTranslationFilter.insufficientAuthentication"</span><span class="token punctuation">,</span><span class="token string">"Full authentication is required to access this resource"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">LogMessage</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Sending %s to access denied handler since access is denied"</span><span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>accessDeniedHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常是交由accessDeniedHandler进行处理.</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis安装</title>
      <link href="2021/04/11/redis/redis_install/"/>
      <url>2021/04/11/redis/redis_install/</url>
      
        <content type="html"><![CDATA[<p>本文基于centos7</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加EPEL仓库</span><span class="token function">sudo</span> yum <span class="token function">install</span> epel-release<span class="token comment"># 安装redis</span><span class="token function">sudo</span> yum <span class="token function">install</span> redis<span class="token comment"># 启动redis</span><span class="token function">sudo</span> systemctl start redis<span class="token comment"># 开启自启</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> redis<span class="token comment"># 重启redis</span><span class="token function">sudo</span> systemctl restart redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认redis配置文件位于<code>/et/redis.conf</code></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="2021/04/08/design-pattern/strategy/"/>
      <url>2021/04/08/design-pattern/strategy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> gof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="2021/04/07/algorithm/sort/quick_sort/"/>
      <url>2021/04/07/algorithm/sort/quick_sort/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序使用分治的思想: 将一个数组以给定元素分为两个数组, 一个数组存放小于该数的其他元素, 另一个数组存放大于该数的其他元素(等于该数的元素可以在任意一个数组中皆可). 接着递归排序这两个数组, 两个数组都有序了, 那么整个数组也就有序了.</p></blockquote><p><strong>NB: 递归发生在排序之后</strong></p><h3 id="快排实现"><a href="#快排实现" class="headerlink" title="快排实现"></a>快排实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 以pivot为基准, 将小于pivot的数放在左侧, 大于的放在右侧</span>        <span class="token keyword">int</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 排序小于pivot的数组</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 排序大于pivot的数组</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nusm<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些配置</title>
      <link href="2021/03/29/mysql/misc/"/>
      <url>2021/03/29/mysql/misc/</url>
      
        <content type="html"><![CDATA[<p>mysql命令行工具: myscli(<a href="https://www.mycli.net/">https://www.mycli.net/</a>)</p><p>mysql共有三个密码侧率:</p><ul><li>LOW 密码长度&gt;=8</li><li>MEDIUM Length &gt;= 8, 包含数字, 大小写字母和特殊符号</li><li>STRONG Length &gt;= 8, 处理MEDIUM还需要字典文件</li></ul><p>mysql查看密码验证策略(默认可能是MEDIUM):</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出可能是以下:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">+--------------------------------------+-------+| Variable_name                        | Value |+--------------------------------------+-------+| validate_password.check_user_name    | ON    || validate_password.dictionary_file    |       || validate_password.length             | 8     || validate_password.mixed_case_count   | 1     || validate_password.number_count       | 1     || validate_password.policy             | LOW   || validate_password.special_char_count | 1     |+--------------------------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改/关闭验证策略:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">// 修改为低等级</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> validate_password<span class="token punctuation">.</span>policy<span class="token operator">=</span>LOW<span class="token punctuation">;</span><span class="token comment">// 修改为中等</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> validate_password<span class="token punctuation">.</span>policy<span class="token operator">=</span>MEDIUM<span class="token punctuation">;</span><span class="token comment">// 关闭验证策略暂时</span>UNINSTALL COMPONENT <span class="token string">"file://component_validate_password"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security Authentication(认证)(5.4.5)</title>
      <link href="2021/03/24/spring/spring-security/spring_security_authentication/"/>
      <url>2021/03/24/spring/spring-security/spring_security_authentication/</url>
      
        <content type="html"><![CDATA[<p>Spring Security为认证提供了全面的支持. 接下来从这两个方面进行介绍:</p><h2 id="架构组件-Architecture-Components"><a href="#架构组件-Architecture-Components" class="headerlink" title="架构组件(Architecture Components)"></a><strong>架构组件(Architecture Components)</strong></h2><p>主要描述Spring Security用于Servlet认证中的架构组件. 主要有以下组件:</p><ul><li><code>SecurityContextHolder</code>: 存储身份验证详细信息的地方.</li><li><code>SecurityContext</code>: 由<code>SecurityContextHolder</code>获得,包含了当前认证客户的<code>Authentication</code>.</li><li><code>Authentication</code>: 可以是<code>AuthenticationManager</code>的输入, 以提供用户提供的用于身份验证的凭据或来自SecurityContext的当前用户.</li><li><code>GrantedAuthority</code>: 授予身份验证主体的权限(即角色, 范围等).</li><li><code>AuthenticationManager</code>: 定义了Spring Security的Filters如何进行认证的API.</li><li><code>ProviderManager</code>: <code>AuthenticationManager</code>的一个通用实现.</li><li><code>Request Credentails with AuthenticationEntryPoint</code>: 用于从客户端请求凭证(即重定向到登录页面, 发送WWW-Authenticate响应等).</li><li><code>AbstractAuthenticationProcessingFilter</code>: 用于认证的基础Filter. 这样为高级别的身份认证流程和各个部件如何协同工作提供了一个好的概念.</li></ul><h2 id="认证机制-Authentication-Mechanisms"><a href="#认证机制-Authentication-Mechanisms" class="headerlink" title="认证机制(Authentication Mechanisms)"></a><strong>认证机制(Authentication Mechanisms)</strong></h2><ul><li>Username and Password - 如何使用用户名密码认证</li><li>OAuth 2.0 Login - OAhth 2.0 使用OpenID Connect登录和非标准的OAuth 2.0 登录(即GitHub)</li><li>SAML 2.0 Login - SAML 2.0 登录</li><li>Central Authentication Server (CAS) - CAS支持</li><li>Remember Me - 如何记住用户</li><li>JAAS Authentication - JAAS认证</li><li>OpenID - OpenID 认证 (不要与OpenID Connect弄混)</li><li>Pre-Authentication Scenarios - 使用外部机制进行认证(e.g. SiteMider或J2EE security), 但仍使用Spring Security授权和防范常见漏洞攻击.</li><li>X509 Authentication - X509 认证</li></ul><h2 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a><strong>SecurityContextHolder</strong></h2><p><code>SecurityContextHolder</code>是Spring Security认证模型的核心. 它包含了<code>SecurityContext</code>.<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/securitycontextholder.png" alt="SecurityContextHolder" loading="lazy"><em>SecurityContextHolder</em><br>上图可以看出, <code>SecurityContextHolder</code>中包含了<code>SecurityContext</code>, <code>SecurityContext</code>中包含了<code>Authentication</code>, <code>Authentication</code>中包含了<code>Principal, Credentials, Authorities</code>.</p><p><code>SecurityContextHolder</code>存储了身份认证的详细信息. Spring Security不关心<code>SecurityContextHolder</code>是如何填充的. 如果他包含了值, 就将它当做当前认证的用户.</p><p>表示客户已经通过认证的最简单的方式是直接设置<code>SecurityContextHolder</code>. 下面展示了如何使用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestingAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"pwd"</span><span class="token punctuation">,</span> <span class="token string">"ROLE_USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>context<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>此处创建一个新的<code>SecurityContext</code>而不是使用<code>SecurityContextHolder.getContext().setAuthentication(authentication)</code>, 避免了多线程的条件竞争.</li></ol></li><li><ol start="2"><li>接着创建一个新的<code>Authentication</code>对象. Spring Security不关心在<code>SecurityContext</code>中设置什么类型的<code>Authentication</code>实现. 此处使用测试用的<code>TestingAuthenticationToken</code>(实现简单). 通常情况下生产环境使用<code>UsernamePasswordAuthenticationToken(userDetails, password, authorities)</code>.</li></ol></li><li><ol start="3"><li>最后在<code>SecurityContextHolder</code>中设置<code>SecurityContext</code>.</li></ol></li></ul><p>通过<code>SecurityContextHolder</code>获取已验证的principal.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContext</span> context <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下<code>SecurityContextHolder</code>使用<code>ThreadLocal</code>存储这些详细信息, 这意味着<code>SecurityContext</code>对同一线程中的方法都是可用的, 即使<code>SecurityContext</code>没有显示地作为参数传递给这些方法. Spring Security的<code>FilterChainProxy</code>确保<code>SecurityContext</code>在线程请求后正确的被清理, 所以使用以这种方式使用<code>ThreadLocal</code>是安全的.</p><p>有些应用不适合使用<code>ThreadLocal</code>(例如Swing), 所以<code>SecurityContextHolder</code>可以在启动时配置一个策略以执行上下文如何存储. 包含以下策略:</p><ul><li>MODE_THREADLOCAL</li><li>MODE_INHERITABLETHREADLOCAL</li><li>MODE_GLOBAL</li></ul><p><code>SecurityContextHolder</code>源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityContextHolder</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MODE_THREADLOCAL <span class="token operator">=</span> <span class="token string">"MODE_THREADLOCAL"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MODE_INHERITABLETHREADLOCAL <span class="token operator">=</span> <span class="token string">"MODE_INHERITABLETHREADLOCAL"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MODE_GLOBAL <span class="token operator">=</span> <span class="token string">"MODE_GLOBAL"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SYSTEM_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.security.strategy"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> strategyName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>SYSTEM_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContextHolderStrategy</span> strategy<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> initializeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化strategy</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>strategyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Set default</span>strategyName <span class="token operator">=</span> MODE_THREADLOCAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MODE_THREADLOCAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MODE_INHERITABLETHREADLOCAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strategyName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MODE_GLOBAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Try to load a custom strategy</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>strategyName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> customStrategy <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strategy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SecurityContextHolderStrategy</span><span class="token punctuation">)</span> customStrategy<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">handleReflectionException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>initializeCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>strategy<span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInitializeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> initializeCount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>strategy<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setStrategyName</span><span class="token punctuation">(</span><span class="token class-name">String</span> strategyName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span>strategyName <span class="token operator">=</span> strategyName<span class="token punctuation">;</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContextHolderStrategy</span> <span class="token function">getContextHolderStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> strategy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityContext</span> <span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"SecurityContextHolder[strategy='"</span> <span class="token operator">+</span> strategyName <span class="token operator">+</span> <span class="token string">"'; initializeCount="</span> <span class="token operator">+</span> initializeCount <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中可以看出, <code>SercurityContextHolder</code>内部使用<code>SecurityContextHolderStrategy</code>执行具体的逻辑. 接下来看一下<code>SecurityContextHolderStrategy</code>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContextHolderStrategy</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清空当前context</span><span class="token keyword">void</span> <span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前context</span><span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置当前context</span><span class="token keyword">void</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建新的空的context实现</span><span class="token class-name">SecurityContext</span> <span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看一下常用的一个实现<code>ThreadLocalSecurityContextHolderStrategy</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalSecurityContextHolderStrategy</span> <span class="token keyword">implements</span><span class="token class-name">SecurityContextHolderStrategy</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用ThreadLocal保存SecurityContext</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityContext</span><span class="token punctuation">></span></span> contextHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ~ Methods</span><span class="token comment">// ========================================================================================================</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>contextHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">SecurityContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityContext</span> ctx <span class="token operator">=</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ctx <span class="token operator">=</span> <span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token class-name">SecurityContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"Only non-null SecurityContext instances are permitted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">SecurityContext</span> <span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityContextImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SecurityContext"><a href="#SecurityContext" class="headerlink" title="SecurityContext"></a><strong>SecurityContext</strong></h2><blockquote><p><code>SecurityContext</code>可以从<code>SecurityContextHolder</code>中获得. 其包含了一个<code>Authenticaiton</code>对象.</p></blockquote><p>源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContext</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a><strong>Authentication</strong></h2><p><code>Authentication</code>在Spring Security中主要有以下两个目的:</p><ul><li>作为<code>AuthenticationManager</code>的输入, 提供用户提供的身份认证凭据. 这种情况下, <code>isAuthenticated()</code>将返回<code>false</code>.</li><li>表示当前认证的用户. 可以从<code>SecurityContext</code>中获取当前的<code>Authentication</code>.</li></ul><p><code>Authentication</code>主要包含以下属性:</p><ul><li><code>principal</code> - 标识用户. 当使用用户名/密码进行身份认证时, 通常是一个<code>UserDetails</code>的一个实例.</li><li><code>credentials</code> - 通常是密码. 多数情况下, 在用户完成身份认证后会被清除, 以保证不会泄露.</li><li><code>authorities</code> - <code>GrantedAuthority</code>是用户被授予的高级权限. 例如角色或领域(roles or scops).</li></ul><p><code>Authentication</code>源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Authentication</span> <span class="token keyword">extends</span> <span class="token class-name">Principal</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取凭证</span><span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取认证请求详细信息, 可能是ip地址, 证书编号等</span><span class="token class-name">Object</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取主体信息, 通常会是UserDetails</span><span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否验证成功</span><span class="token keyword">boolean</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GrantedAuthority"><a href="#GrantedAuthority" class="headerlink" title="GrantedAuthority"></a><strong>GrantedAuthority</strong></h2><p><code>GrantedAuthority</code>是用户被授予的高级权限. 例如roles或scopes.</p><p>通过<code>Authentication.getAuthorities()</code>可以获得<code>GrantedAuthority</code>集合. <code>GrantedAuthority</code>就是授予用户的权限. 通常称这些权限为角色, 例如<code>ROLE_ADMINISTRATOR, ROLE_HR_SUPERVISOR</code>. 这些角色可以用于配置web授权, 方法授权和domain对象授权. 使用用户名/密码方式认证的<code>GrantedAuthority</code>通常由<code>UserDetailService</code>加载. </p><p>源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GrantedAuthority</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a><strong>AuthenticationManager</strong></h2><p><code>AuthenticationManager</code>是定义Spring Security的Filter如何执行认证的API. 在控制器中(即Spring Security的Filter)中调用<code>AuthenticationManager</code>将返回的<code>Authentication</code>设置到<code>SecurityContextHolder</code>中. 如果没有集成Spring Security’s Filters, 也可以直接设置<code>SecurityContextHolder</code>而不适用<code>AuthenticationManager</code>.</p><p>尽管<code>AuthenticationManager</code>的实现可以是任意的, 但是最通用的实现是<code>ProviderManager</code>.</p><p>源码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">&#123;</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a><strong>ProviderManager</strong></h2><p><code>ProviderManager</code>是<code>AuthenticationManager</code>的一个最常用的实现. <code>ProviderManager</code>委托给<code>AuthenticationProvider</code>列表进行认证. 每个AuthenticationProvider都有机会指示身份验证应该是成功的、失败的，或者指示它不能做出决定，并允许下游的AuthenticationProvider做出决定.如果配置的authenticationprovider中没有一个可以进行身份验证，那么身份验证将抛出ProviderNotFoundException异常，这是一个特殊的AuthenticationException，它指示ProviderManager不支持传入的<code>Authentication</code>类型.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/providermanager.png" alt="ProviderManager" loading="lazy"><em>ProviderManager</em></p><p>实际上，每个AuthenticationProvider都知道如何执行特定类型的身份验证. 例如，一个<code>AuthenticationProvider</code>可能能够验证用户名/密码，而另一个可能能够验证SAML断言。 这允许每个AuthenticationProvider执行非常特定类型的身份验证，同时支持多种身份验证类型，并且只暴露出单个AuthenticationManager bean。</p><p>ProviderManager还允许配置一个可选的父AuthenticationManager，当AuthenticationProvider无法执行身份验证时，该父AuthenticationManager会被使用.父类可以是任何类型的AuthenticationManager，但它通常是ProviderManager的一个实例.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/providermanager-parent.png" alt="ParentProviderManager" loading="lazy"><em>ParentProviderManager</em></p><p>事实上，多个ProviderManager实例可能共享相同的父AuthenticationManager。这在多个SecurityFilterChain实例中比较常见，这些实例有一些共同的身份验证(共享的父AuthenticationManager)，但也有不同的身份验证机制(不同的ProviderManager实例)。</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/providermanagers-parent.png" alt="ShareParentProviderManager" loading="lazy"><em>ShareParentProviderManager</em></p><p>默认情况下，ProviderManager将尝试从成功的身份验证请求返回的身份验证对象中清除任何敏感的凭据信息。这可以防止诸如密码之类的信息在HttpSession中被保留的时间超过必要的时间。</p><p>下面看一下ProviderManager的构造方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ProviderManager</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationProvider</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>providers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Construct a &#123;@link ProviderManager&#125; using the given &#123;@link AuthenticationProvider&#125;s * @param providers the &#123;@link AuthenticationProvider&#125;s to use */</span><span class="token keyword">public</span> <span class="token class-name">ProviderManager</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthenticationProvider</span><span class="token punctuation">></span></span> providers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>providers<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Construct a &#123;@link ProviderManager&#125; using the provided parameters * @param providers the &#123;@link AuthenticationProvider&#125;s to use * @param parent a parent &#123;@link AuthenticationManager&#125; to fall back to */</span><span class="token keyword">public</span> <span class="token class-name">ProviderManager</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthenticationProvider</span><span class="token punctuation">></span></span> providers<span class="token punctuation">,</span> <span class="token class-name">AuthenticationManager</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>providers<span class="token punctuation">,</span> <span class="token string">"providers list cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>providers <span class="token operator">=</span> providers<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出, ProviderManager可以接受一系列的AuthenticationProvider.</p><p>接着看一下ProviderManager是如何具体实现Authentication的authenticate方法(只截取部分):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 循环每个provider</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationProvider</span> provider <span class="token operator">:</span> <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先调用support方法测试该provider是否支持验证toTest</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>toTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ... 省略一些内容</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用provider执行验证, 只要有一个验证通过了就返回</span>    result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">copyDetails</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountStatusException</span> <span class="token operator">|</span> <span class="token class-name">InternalAuthenticationServiceException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">prepareException</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    lastException <span class="token operator">=</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果结果为空, 且存在父AuthenticationManager, 使用父AuthenticationManager执行验证</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    parentResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> parentResult<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProviderNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    parentException <span class="token operator">=</span> ex<span class="token punctuation">;</span>    lastException <span class="token operator">=</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 验证成功, 清除敏感信息, 例如密码等</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eraseCredentialsAfterAuthentication <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// ...省略一些代码</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Parent was null, or didn't authenticate (or throw an exception).</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lastException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  lastException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProviderNotFoundException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"ProviderManager.providerNotFound"</span><span class="token punctuation">,</span>                                                                         <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> toTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"No AuthenticationProvider found for &#123;0&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ... 省略一些代码</span><span class="token comment">// 如果验证未通过, 最后抛出异常</span><span class="token keyword">throw</span> lastException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a><strong>AuthenticationProvider</strong></h2><p><code>ProviderManager</code>可以注入多个<code>AuthenticationProvider</code>. 每个<code>AuthenticationProvider</code>执行特定类型的认证. 例如<code>DaoAuthenticationProvider</code>支持基于用户名/密码的认证, <code>JwtAuthenticationProvider</code>支持使用JWT token认证.</p><p><code>AuthenticationProvider</code>接口定义了两个方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 验证身份, 如果不支持该authentication类型验证, 则可以返回nullm, 如果验证失败抛出异常</span><span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token comment">// 测试该provider是否支持验证给定的authentication</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一下常用的<code>AbstractUserDetailsAuthenticationProvider</code>(<code>DaoAuthenticationProvider</code>就继承自该provider)的authenticate流程:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用AuthenticationEntryPoint请求凭证"><a href="#使用AuthenticationEntryPoint请求凭证" class="headerlink" title="使用AuthenticationEntryPoint请求凭证"></a><strong>使用AuthenticationEntryPoint请求凭证</strong></h2><p><code>AuthenticationEntryPoint</code>用于发送从客户端请求凭证的HTTP响应.</p><p>有时客户端会主动携带凭证(例如用户名/密码)去请求资源. 在这种情况下, Spring Security不需要再向客户端发送请求凭证的HTTP响应.</p><p>其他情况下, 客户端可能会发送一个未经认证的获取资源请求. 在这种情况下, 使用<code>AuthenticationEntryPoint</code>向客户端请求凭证. <code>AuthenticationEntryPoint</code>可能会重定向到登录页面, 使用<code>WWW-Authenticate</code>头部响应.</p><h2 id="AbstractAuthenticationProcessingFilter"><a href="#AbstractAuthenticationProcessingFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter"></a><strong>AbstractAuthenticationProcessingFilter</strong></h2><p><code>AbstractAuthenticationProcessingFilter</code>作为基础的Filter对用户的凭证进行验证. 在验证凭证之前, Spring Security通常会使用<code>AuthenticationEntryPoint</code>请求凭证.</p><p>然后, <code>AbstractAuthenticationProcessingFilter</code>可以验证任何提交给他的身份认证请求.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/abstractauthenticationprocessingfilter.png" alt="AbstractAuthenticationProcessingFilter" loading="lazy"><em>AbstractAuthenticationProcessingFilter</em></p><ul><li>1-当用户提交他们的凭证后, <code>AbstractAuthenticationProcessingFilter</code>从<code>HttpServletRequest</code>中创建一个待验证的<code>Authentication</code>. 创建的<code>Authentication</code>的类型取决于<code>AbstractAuthenticationProcessingFilter</code>子类. 例如<code>UsernamePasswordAuthenticationFitler</code>根据<code>HttpServletRequest</code>中提交的username和password创建一个<code>UsernamePasswordAuthenticationToken</code>.</li><li>2-将创建的<code>Authentication</code>传递给<code>AuthenticationManager</code>进行验证. </li><li>3-如果验证失败, 执行以下操作:<ul><li>清空<code>SecurityContextHolder</code></li><li>调用<code>RememberMeService.loginFail</code>. 如果未配置remember me, 不执行任何操作.</li><li>调用<code>AuthenticationFailureHandler</code>.</li></ul></li><li>4-如果验证成功, 执行以下操作:<ul><li><code>SessionAuthenticationStrategy</code>收到新的登录通知(用于缓存?).</li><li>在<code>SecurityContextHolder</code>中设置<code>Authentication</code>. 之后使用<code>SecurityContextPersistenceFilter</code>将<code>SecurityContex</code>保存到HttpSession中.</li><li>调用<code>RememberMeService.loginSuccess</code>. 如果未配置remember me, 不执行任何操作.</li><li>通过<code>ApplicationEventPublisher</code>发布一个<code>InteractiveAuthenticationSuccessEvent</code>.</li><li>调用<code>AuthenticationSuccessHandler</code>.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security Filter使用(5.4.5)</title>
      <link href="2021/03/24/spring/spring-security/spring_security_with_servlet/"/>
      <url>2021/03/24/spring/spring-security/spring_security_with_servlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Security通过使用标准的Servlet<code>Filter</code>整合了Servlet容器. 这也就意味着它可以运行在任意的Servlet容器中. 更具体的来说, 不必在基于Servlet的应用中使用Spring就可以使用Spring Security.</p></blockquote><p>以下将介绍这些内容:</p><ul><li>Filter, Servlet中的Filter及FilterChain</li><li>DelegatingFilterChainProxy</li><li>FilterChainProxy</li><li>SecurityFilterChain</li><li>Security Filters</li></ul><h3 id="Filter概览"><a href="#Filter概览" class="headerlink" title="Filter概览"></a>Filter概览</h3><p>Spring Security基于Servlet的<code>Filter</code>, 下面看一下一个典型的单个HTTP请求的处理层级.<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/filterchain.png" alt="FilterChain" loading="lazy"><em>FilterChain</em><br>客户端发送一个请求到应用, 容器创建一个<code>FilterChain</code>, 其中包含了<code>Filter</code>和<code>Servlet</code>用于处理基于请求URL路径的<code>HttpServletRequest</code>. 在Spring MVC中该Servlet是<code>DispatchServlet</code>的一个实例. 最多使用一个<code>Servlet</code>处理一个<code>HttpServletRequest</code>和<code>HttpServletResponse</code>. 然而可以有多个<code>Filter</code>用于以下:</p><ul><li>阻止下游(downstream) <code>Filter</code>或<code>Servlet</code>被调用. </li><li>使用下游<code>Filter</code>和<code>Servlet</code>修改<code>HttpServletRequest</code>或<code>HttpServletResponse</code>.</li></ul><p>FilterChain示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something before the rest of the application</span>    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invoke the rest of the application</span>    <span class="token comment">// do something after the rest of the application</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>Filter</code>会影响下游的<code>Filter</code>和<code>Servlet</code>, 所以Filter的执行顺序极其重要.</p><h2 id="DelegatingFilterProxy"><a href="#DelegatingFilterProxy" class="headerlink" title="DelegatingFilterProxy"></a><strong>DelegatingFilterProxy</strong></h2><p>Spring提供了一个<code>Filter</code>的实现<code>DelegatingFilterProxy</code>, 该实现连接了Servlet容器生命周期和Spring的<code>ApplicationContext</code>. Servlet容器允许使用其标准注册<code>Filter</code>, 但是无法知晓Spring定义的Bean(即Spring管理的Bean实现了Filter接口, 但是未使用Servlet标准进行注册). <code>DelegatingFilterProxy</code>可以通过标准的Servlet容器技术注册<code>Filter</code>, 同时将任务委派给实现了<code>Filter</code>接口的Spring Bean.</p><p>下图展示了<code>DelegatingFilterProxy</code>如何适配<code>Filter</code>和<code>FilterChain</code>:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/delegatingfilterproxy.png" alt="DelegatingFilterProxy" loading="lazy"><em>DelegatingFilterProxy</em><br><code>DelegatingFilterProxy</code>从<code>Application</code>中查找Bean Filter<sub>0</sub>. 以下伪代码展示了<code>DelegatingFilterProxy</code>的使用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Lazily get Filter that was registered as a Spring Bean</span>    <span class="token comment">// For the example in DelegatingFilterProxy delegate is an instance of Bean Filter0</span>    <span class="token class-name">Filter</span> delegate <span class="token operator">=</span> <span class="token function">getFilterBean</span><span class="token punctuation">(</span>someBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// delegate work to the Spring Bean</span>    delegate<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>DelegatingFilterProxy</code>的另一个好处是允许<code>Filter</code>Bean的延迟查找. 这一点十分重要, 因为容器需要在启动之前对<code>Filter</code>实例j进行注册. 然而Spring通常在<code>Filter</code>实例注册完成后才会使用<code>ContextLoaderListener</code>完成Spring Bean加载.</p><h2 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a><strong>FilterChainProxy</strong></h2><p>Spring Security的Servlet支持包含于<code>FilterChainProxy</code>. <code>FilterChainProxy</code>是Spring Security提供的一个特殊的<code>Filter</code>, 允许通过SecurityFilterChain委托给许多<code>Filter</code>实例. 因为<code>FilterChainProxy</code>是一个Bean, 所以通常使用<code>DelegatingFilterProxy</code>装饰.<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/filterchainproxy.png" alt="FilterChainProxy" loading="lazy"><em>FilterChainProxy</em></p><h2 id="SecurityFilterChain"><a href="#SecurityFilterChain" class="headerlink" title="SecurityFilterChain"></a><strong>SecurityFilterChain</strong></h2><p><code>SecurityFilterChain</code>用于<code>FilterChainProxy</code>决定哪些Spring Security的<code>Filter</code>需要在此次请求中调用.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/securityfilterchain.png" alt="SecurityFilterChain" loading="lazy"><em>SecurityFilterChain</em></p><p><code>SecurityFilterChain</code>中的<code>Security Filters</code>通常都是Bean, 但是他们由<code>FilterChainProxy</code>注册而不是<code>DelegatingFilterChain</code>. 相比于通过<code>DelegatingFilterProxy</code>或者Servlet容器注册来说, 使用<code>FilterChainProxy</code>提供了大量的好处:</p><ul><li>首先, 它为Spring Security的Servlet支持提供了一个开始点. 因此, 如果你想要去排除Spring Security的容器支持故障, 就可以在<code>FilterChainProxy</code>中打断点.</li><li>第二, 因为<code>FilterChainProxy</code>是Spring Security执行的核心, 所以它可以执行被视为不可选的任务(即该任务必须执行?). 例如, 它清除<code>SecurityContext</code>避免内存泄漏. 它也应用Spring Security的<code>HttpFirewall</code>保护应用免遭特定类型的攻击.</li><li>此外, 它提供了更为灵活的方式决定一个<code>SecurityFilterChain</code>是否应该被调用. 在Servlet容器中, <code>Fitler</code>是基于URL调用的. 然而<code>FilterChainProxy</code>可以通过利用<code>RequestMathcer</code>接口, 基于<code>HttpServletRequest</code>中任何信息决定调用.</li></ul><p>实际上, <code>FilterChainProxy</code>可以用于决定执行哪一个<code>SecurityFilterChain</code>.<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/multi-securityfilterchain.png" alt="Multiple SecurityFilterChain" loading="lazy"><em>Multiple SecurityFilterChain</em><br>上图中, <code>FilterChainProxy</code>决定了哪一个<code>SecurityFilterChain</code>该被使用. 只有第一个匹配的<code>SecurityFilterChain</code>才会被调用. 如果请求<code>/api/messages</code>URL, 那么SecurityFilterChain<sub>0</sub>将会匹配(由于其模式是<code>/api/**</code>), 所以只有SecurityFilterChain<sub>0</sub>会被调用. 如果请求的URL是<code>/message/</code>, 那么SecurityFilterChain<sub>0</sub>不会匹配, 所以<code>FilterChainProxy</code>会继续尝试调用每个<code>SecurityFilterChain</code>. 如果没有其他的<code>SecurityFilterChain</code>匹配, 最后匹配的SecurityFilterChain<sub>n</sub>将会被调用.</p><p><strong>NB:每个<code>SecurityFilterChain</code>都可以是唯一的, 并且可以单配置.</strong> 事实上, 一个<code>SecurityFilterChain</code>可能有0个security <code>Filter</code>(如果应用希望Spring Security忽略特定的请求).</p><h2 id="Security-Filters"><a href="#Security-Filters" class="headerlink" title="Security Filters"></a><strong>Security Filters</strong></h2><p>Security Filters通过SecurityFilterChain API插入FilterChainProxy. Filters的顺序十分重要. 通常没有必要去了解Spring Security Filters的顺序. 然而有时候还是有必要去知道这些顺序的. 以下是完成的Spring Security Filter 排序:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">ChannelProcessingFilterWebAsyncManagerIntegrationFilterSecurityContextPersistenceFilterHeaderWriterFilterCorsFilterCsrfFilterLogoutFilterOAuth2AuthorizationRequestRedirectFilterSaml2WebSsoAuthenticationRequestFilterX509AuthenticationFilterAbstractPreAuthenticatedProcessingFilterCasAuthenticationFilterOAuth2LoginAuthenticationFilterSaml2WebSsoAuthenticationFilterUsernamePasswordAuthenticationFilterOpenIDAuthenticationFilterDefaultLoginPageGeneratingFilterDefaultLogoutPageGeneratingFilterConcurrentSessionFilterDigestAuthenticationFilterBearerTokenAuthenticationFilterBasicAuthenticationFilterRequestCacheAwareFilterSecurityContextHolderAwareRequestFilterJaasApiIntegrationFilterRememberMeAuthenticationFilterAnonymousAuthenticationFilterOAuth2AuthorizationCodeGrantFilterSessionManagementFilterExceptionTranslationFilterFilterSecurityInterceptorSwitchUserFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理Security异常"><a href="#处理Security异常" class="headerlink" title="处理Security异常"></a><strong>处理Security异常</strong></h2><p><code>ExceptionTranslationFilter</code>允许将<code>AccessDeniedException</code>和<code>AuthenticalException</code>转换为Http 响应. <code>ExceptionTranslationFilter</code>作为<code>SecurityFilters</code>之一被插入到<code>FilterChainProxy</code>中.</p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/spring-security/exceptiontranslationfilter.png" alt="ExceptionTranslationFilter" loading="lazy"><em>ExceptionTranslationFilter</em></p><ul><li>首先, <code>ExceptionTranslationFilter</code>调用<code>FilterChain.doFilter(request, response)</code>去调用应用的剩余部分.</li><li>如果用户未认证或抛出AuthenticationException异常, 开始进行认证:<ul><li>清空<code>SecurityContextHolder</code></li><li>将<code>HttpServletRequest</code>保存到<code>RequestCache</code>中. 当用户成功认证后, 将<code>RequestCache</code>内容重播原始request.</li><li><code>AuthenticationEntryPoint</code>用于从客户端请求凭证(credential). 例如, 它可能重定向到登录页面或者发送一个<code>WWW-Authenticat</code>头部(header).</li></ul></li><li>否则, 如果产生<code>AccessDeniedException</code>, 那么拒绝访问. 调用<code>AccessHandler</code>处理决绝访问.</li></ul><p><strong>NB: 如果应用不抛出<code>AccessDeniedException</code>或<code>AuthenticationException</code>异常, 那么<code>ExceptionTranslationFilter</code>什么都不会做.</strong> </p><p>上述<code>ExceptionTranslationFilter</code>伪代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccessDeniedException</span> <span class="token operator">|</span> <span class="token class-name">AuthenticationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authentication <span class="token operator">||</span> ex <span class="token keyword">instanceof</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">startAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">accessDenied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1: 意味着如果应用的其他部分抛出了<code>AccessDeniedException</code>或<code>AuthenticationException</code>异常, 将在此处捕获</li><li>2: 如果用户尚未认证, 或者抛出的是AuthenticationException, 那么开始认证.</li><li>3: 其他情况, 拒绝访问.</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security模块介绍(5.4.5)</title>
      <link href="2021/03/24/spring/spring-security/spring_security_module/"/>
      <url>2021/03/24/spring/spring-security/spring_security_module/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security核心模块"><a href="#Spring-Security核心模块" class="headerlink" title="Spring Security核心模块"></a><strong>Spring Security核心模块</strong></h2><p>Spring Security分为以下几个核心模块:</p><h3 id="Core-—-spring-security-core-jar"><a href="#Core-—-spring-security-core-jar" class="headerlink" title="Core — spring-security-core.jar"></a><strong>Core — spring-security-core.jar</strong></h3><blockquote><p>该模块包含了核心认证(core authentication), 访问控制(access-control)类和接口, 远程支持(remoting support), 和基础的配置(provisioning)API. 包含以下几个顶级包:</p></blockquote><ul><li>org.springframework.security.core</li><li>org.springframework.security.access</li><li>org.springframework.security.authentication</li><li>org.springframework.security.provisioning</li></ul><h3 id="Remoting-—-spring-security-remoting-jar"><a href="#Remoting-—-spring-security-remoting-jar" class="headerlink" title="Remoting — spring-security-remoting.jar"></a><strong>Remoting — spring-security-remoting.jar</strong></h3><blockquote><p>该模块提供了与Spring Remoting的整合.</p></blockquote><h3 id="Web-—-spring-security-web-jar"><a href="#Web-—-spring-security-web-jar" class="headerlink" title="Web — spring-security-web.jar"></a><strong>Web — spring-security-web.jar</strong></h3><blockquote><p>该模块包含了过滤器和相关的web安全(web-security)基础代码. 包含了任何与servlet API相关的依赖. </p></blockquote><h3 id="Config-—-spring-security-config-jar"><a href="#Config-—-spring-security-config-jar" class="headerlink" title="Config — spring-security-config.jar"></a><strong>Config — spring-security-config.jar</strong></h3><blockquote><p>该模块包含了安全命令空间解析代码和Java配置代码. 如果配置中使用Spring Security的XML命名空间或Spring Security的Java配置支持, 则需要引入该模块.</p></blockquote><h3 id="LDAP-—-spring-security-ldap-jar"><a href="#LDAP-—-spring-security-ldap-jar" class="headerlink" title="LDAP — spring-security-ldap.jar"></a><strong>LDAP — spring-security-ldap.jar</strong></h3><blockquote><p>该模块包含LDAP认证和配置代码.</p></blockquote><h3 id="OAuth-2-0-Core-—-spring-security-oauth2-core-jar"><a href="#OAuth-2-0-Core-—-spring-security-oauth2-core-jar" class="headerlink" title="OAuth 2.0 Core — spring-security-oauth2-core.jar"></a><strong>OAuth 2.0 Core — spring-security-oauth2-core.jar</strong></h3><blockquote><p>该模块提供了支持OAuth2.0认证框架和OpenID Connect Core1.0框架的核心类和接口.</p></blockquote><h3 id="OAuth-2-0-Client-—-spring-security-oauth2-client-jar"><a href="#OAuth-2-0-Client-—-spring-security-oauth2-client-jar" class="headerlink" title="OAuth 2.0 Client — spring-security-oauth2-client.jar"></a><strong>OAuth 2.0 Client — spring-security-oauth2-client.jar</strong></h3><blockquote><p>该模块包含对OAuth2.0认证框架和OpenID Connect Core1.0的客户端支持.</p></blockquote><h3 id="OAuth-2-0-JOSE-—-spring-security-oauth2-jose-jar"><a href="#OAuth-2-0-JOSE-—-spring-security-oauth2-jose-jar" class="headerlink" title="OAuth 2.0 JOSE — spring-security-oauth2-jose.jar"></a><strong>OAuth 2.0 JOSE — spring-security-oauth2-jose.jar</strong></h3><blockquote><p>该模块包含了Spring Security对JOSE(Javascript Object Signing and Encryption)的支持. JOSE框架旨在提供一个在各方之间安全转移声明的方法(The JOSE framework is intended to provide a method to securely transfer claims between parties). 它由一组规范构成:</p></blockquote><ul><li>JSON Web Token (JWT)</li><li>JSON Web Signature(JWS)</li><li>JSON Web Encryption(JWE)</li><li>JSON Web Key(JWE)</li></ul><p>包含以下顶级包:</p><ul><li>org.springframework.security.oauth2.jwt</li><li>org.springframework.security.oauth2.jose</li></ul><h3 id="OAuth-2-0-Resource-Server-—-spring-security-oauth2-resource-server-jar"><a href="#OAuth-2-0-Resource-Server-—-spring-security-oauth2-resource-server-jar" class="headerlink" title="OAuth 2.0 Resource Server — spring-security-oauth2-resource-server.jar"></a><strong>OAuth 2.0 Resource Server — spring-security-oauth2-resource-server.jar</strong></h3><blockquote><p>该模块包含Spring Security对OAuth 2.0资源服务的支持.</p></blockquote><h3 id="ACL-—-spring-security-acl-jar"><a href="#ACL-—-spring-security-acl-jar" class="headerlink" title="ACL — spring-security-acl.jar"></a><strong>ACL — spring-security-acl.jar</strong></h3><blockquote><p>该模块包含一个特定领域对象ACL实现. 用于将安全性应用到应用中的指定领域对象实例上.(It is used to apply security to specific domain object instances within your application. 太拗口了).</p></blockquote><h3 id="CAS-—-spring-security-cas-jar"><a href="#CAS-—-spring-security-cas-jar" class="headerlink" title="CAS — spring-security-cas.jar"></a><strong>CAS — spring-security-cas.jar</strong></h3><blockquote><p>该模块包含了Spring Security的CAS(Central Authentication Service)客户端整合. 如果想要使用CAS single sign-on(单点登录)服务可以使用它.</p></blockquote><h3 id="OpenID-—-spring-security-openid-jar"><a href="#OpenID-—-spring-security-openid-jar" class="headerlink" title="OpenID — spring-security-openid.jar"></a><strong>OpenID — spring-security-openid.jar</strong></h3><blockquote><p>该模块包含OpenID web认证支持. <strong>OpenID 1.0和2.0协议已经过时了, 现在推荐使用OpenID Connect</strong></p></blockquote><h3 id="Test-—-spring-security-test-jar"><a href="#Test-—-spring-security-test-jar" class="headerlink" title="Test — spring-security-test.jar"></a><strong>Test — spring-security-test.jar</strong></h3><blockquote><p>该模块包含测试支持.</p></blockquote><h3 id="Taglibs-—-spring-secuity-taglibs-jar"><a href="#Taglibs-—-spring-secuity-taglibs-jar" class="headerlink" title="Taglibs — spring-secuity-taglibs.jar"></a><strong>Taglibs — spring-secuity-taglibs.jar</strong></h3><blockquote><p>该模块包含Spring Security的JSP标签实现.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security介绍及特性(5.4.5)</title>
      <link href="2021/03/23/spring/spring-security/spring_security_intro/"/>
      <url>2021/03/23/spring/spring-security/spring_security_intro/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security-简介"><a href="#Spring-Security-简介" class="headerlink" title="Spring Security 简介"></a><strong>Spring Security 简介</strong></h2><blockquote><p>Spring Security 提供了认证(authentication)和授权(authorzation)功能, 并且可以防范常见的漏洞攻击.</p></blockquote><h2 id="Spring-Security特性"><a href="#Spring-Security特性" class="headerlink" title="Spring Security特性"></a><strong>Spring Security特性</strong></h2><blockquote><p>Spring Security为认证, 授权和防范常见漏洞攻击提供了广泛的支持. 同时也提供了其他库的整合简化使用.</p></blockquote><h3 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证(Authentication)"></a><strong>认证(Authentication)</strong></h3><p>认证是我们验证试图访问特定资源的人的身份的方式. 通常的认证一个用户的方式是使用用户名和密码. 一旦完成了认证, 我们就知道身份并执行授权.</p><h4 id="认证支持"><a href="#认证支持" class="headerlink" title="认证支持"></a><strong>认证支持</strong></h4><p>Spring Security为认证客户提供了内置的支持.<br>TODO authentication for Servelt</p><h4 id="密码存储-Password-Storage"><a href="#密码存储-Password-Storage" class="headerlink" title="密码存储(Password Storage)"></a><strong>密码存储(Password Storage)</strong></h4><h5 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a><strong>PasswordEncoder</strong></h5><p>Spring Security的<code>PasswordEncoder</code>接口用于执行密码的单向转换(one way transformation), 使得密码可以安全存储. 给定的<code>PasswordEncoder</code>是进行单项转换, 当密码需要双向转换的时候(例如存储于向数据库进行身份验证的凭证, 当我们连接数据库是, 需要使用真实的密码传到数据库, 所以需要双向转换)就不需要使用它. 通常<code>PasswordEncoder</code>用于存储需要在身份验证时就与用户提供的密码进行比较的密码(可以在数据库中存储使用PasswordEncoder转换后的密码, 当用户需要验证密码时, 使用PasswordEncoder将用户提供的密码进行转换并与数据库中的密码进行比较, 这样数据库中就不会显示保存用户的密码).</p><h5 id="密码存储历史"><a href="#密码存储历史" class="headerlink" title="密码存储历史"></a><strong>密码存储历史</strong></h5><ol><li>直接存储明文密码, 使用SQL注入很容易导致密码泄露</li><li>SHA-256, Rainbow Tables</li><li>加盐的SHA-256, 计算机计算效率大幅提升, 也不安全</li><li>现在推荐使用自适应单项函数来存储密码. 自适应单项函数有以下几个例子: bcrypt, PBKDF2, scrypt, and argon2.</li></ol><p>在Spring Security 5.0 之前<code>PasswordEncoder</code>默认使用<code>NoOpPasswordEncoder</code>(需要简单的文本密码).由于密码存储历史, 你可能希望当前的默认<code>PasswordEncoder</code>是<code>BCryptPasswordEncoder</code>, 但是这样可能导致以下问题:</p><ul><li>有许多应用程序使用无法轻易迁移的旧密码编码</li><li>密码存储的最佳实践会再次改变</li><li>作为一个框架, Spring Security不能频繁进行破坏性的更改</li></ul><p>Spring Security引进了<code>DelegatingPasswordEncode</code>解决以下问题:</p><ul><li>确保使用当前推荐的密码编码方式对密码进行编码</li><li>允许以现代和传统格式验证密码</li><li>允许在未来升级密码的编码方式</li></ul><h5 id="DelegatingPasswordEncoder"><a href="#DelegatingPasswordEncoder" class="headerlink" title="DelegatingPasswordEncoder"></a><strong>DelegatingPasswordEncoder</strong></h5><p>创建<code>DelegatingPasswordEncoder</code>可以通过<code>PasswordEncoderFactories</code>或者自定义的方式.</p><ul><li><p><code>PasswordEncoderFactories</code>创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PasswordEncoder</span> pe <span class="token operator">=</span> <span class="token class-name">PasswordEncoderFactories</span><span class="token punctuation">.</span><span class="token function">createDelegatingPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义创建:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> idForEncode <span class="token operator">=</span> <span class="token string">"bcrypt"</span><span class="token punctuation">;</span><span class="token class-name">Map</span> encoders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>idForEncode<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"noop"</span><span class="token punctuation">,</span> <span class="token class-name">NoOpPasswordEncoder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pbkdf2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Pbkdf2PasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"scrypt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>encoders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sha256"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StandardPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PasswordEncoder</span> passwordEncoder <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">DelegatingPasswordEncoder</span><span class="token punctuation">(</span>idForEncode<span class="token punctuation">,</span> encoders<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="密码存储格式-Password-Storage-Format"><a href="#密码存储格式-Password-Storage-Format" class="headerlink" title="密码存储格式(Password Storage Format)"></a><strong>密码存储格式(Password Storage Format)</strong></h5><p>通用的密码格式如下:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;id&#125;encodePassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>id</code>用于标识PasswordEncoder的编码方式. <code>id</code>必须在编码密码的开始, 并且以<code>&#123;</code>开始, 以<code>&#125;</code>结尾. 下面看一下使用不同id编码后的密码格式:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;bcrypt&#125;$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM&#x2F;BG &#123;noop&#125;password &#123;pbkdf2&#125;5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc &#123;scrypt&#125;$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc&#x2F;9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw&#x3D;&#x3D;$OAOec05+bXxvuu&#x2F;1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc&#x3D;  &#123;sha256&#125;97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述<code>&#123;bcrypt&#125;</code>代表使用BCrypt编码方式进行密码加密, 其他类似.</p><h5 id="密码存储配置"><a href="#密码存储配置" class="headerlink" title="密码存储配置"></a><strong>密码存储配置</strong></h5><p>Spring Security默认使用<code>DelegatingPasswordEncoder</code>. 可以通过定义<code>Password</code>bean注入Spring作为默认<code>PasswordEncoder</code>. 例如:</p><pre class="line-numbers language-none"><code class="language-none">@Beanpublic PasswordEncoder passwordEncoder() &#123;    return new BCryptPasswordEncoder();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞防护-Protection-Against-Exploits"><a href="#漏洞防护-Protection-Against-Exploits" class="headerlink" title="漏洞防护(Protection Against Exploits)"></a><strong>漏洞防护(Protection Against Exploits)</strong></h3><p>Spring Security提供了针对常见漏洞的防护. 只要可能, 这些防护防护措施是默认开启的.</p><h4 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF(Cross Site Request Forgery)"></a><strong>CSRF(Cross Site Request Forgery)</strong></h4><blockquote><p>Spring Security对跨站请求伪造攻击防护提供了全面的支持.</p></blockquote><h5 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a><strong>CSRF是什么</strong></h5><p>CSRF利用网站对用户网页浏览器的信任进行攻击. 通常用户登录后, 服务器会返回cookie给用户浏览器保存登录信息. 攻击者在自己网站中调用用户授权的网站链接, 浏览器会默认携带cookie信息, 从而欺骗浏览器进行攻击.</p><h5 id="防护CSRF攻击"><a href="#防护CSRF攻击" class="headerlink" title="防护CSRF攻击"></a><strong>防护CSRF攻击</strong></h5><p>Spring 提供了两种技术进行防护CSRF攻击:</p><ul><li>Synchronizer Token Pattern(同步器token模式)</li><li>在cookie中指定SameSite Attribute</li></ul><p><strong>NB:以上两种方式都要求安全方法必须是幂等的(Safe Methods Must be Idempotent)</strong> </p><blockquote><p>Safe Methods Must be Idempotent, 为了保证CSRF防护正常工作, 必须保证安全方法的幂等性. 这意味着<code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>TRACE</code>必须保证不修改应用的状态.</p></blockquote><h5 id="同步器token模式-Synchronizer-Token-Pattern"><a href="#同步器token模式-Synchronizer-Token-Pattern" class="headerlink" title="同步器token模式(Synchronizer Token Pattern)"></a><strong>同步器token模式(Synchronizer Token Pattern)</strong></h5><p>最主要且广泛使用的防护CSRF攻击的措施是同步器token模式. 该方式确保每个HTTP请求除了有<code>session cookie</code>还必须携带一个称为<code>CSRF token</code>的安全随机值.</p><p>每当一个HTTP请求被提交, 服务器必须验证提交的<code>CSRF token</code>是否与后台生成的<code>CSRF token</code>一致, 若不一致, 拒绝请求.</p><p>使用这种方法的关键点在于<code>CSRF token</code>必须是HTTP请求的一部分, 并且不会被浏览器自动提交. 例如: 在HTTP请求的参数中或者header中携带<code>CSRF token</code>可以防护攻击. 在cookie中使用则不行, 因为cookie会被浏览器自动提交.</p><h5 id="SameSite-Attribute"><a href="#SameSite-Attribute" class="headerlink" title="SameSite Attribute"></a><strong>SameSite Attribute</strong></h5><p>一个新兴的防护CSRF攻击的方式是为cookie指定SameSite Attribute. 指定SameSite属性可以使用通过外部网站访问时浏览器不会自动携带cookie.</p><p><strong>NB:Spring Security不直接控制<code>session cookie</code>的创建, 所以不支持SameSite属性. <code>Spring Session</code>提供了对该属性的支持.</strong> </p><p>HTTP响应头带有SameSite属性例子:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Set-Cookie: JSESSIONID&#x3D;randomid; Domain&#x3D;bank.example.com; Secure; HttpOnly; SameSite&#x3D;Lax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>SameSite</code>的合法属性包括以下两种:</p><ul><li>Strict: 相同站点请求时会携带cookie, 否则不携带</li><li>Lax: 相同站点或者该站点的顶级站点(如当前站点是social.example.com, 则email.example.com也会携带)且方法幂等请求时会携带cookie, 否则不携带.</li></ul><p><strong>NB:<code>SameSite</code>属性需要浏览器的支持.</strong> </p><h4 id="TODO-安全HTTP响应头-Security-HTTP-Response-Header"><a href="#TODO-安全HTTP响应头-Security-HTTP-Response-Header" class="headerlink" title="TODO 安全HTTP响应头(Security HTTP Response Header)"></a><strong>TODO 安全HTTP响应头(Security HTTP Response Header)</strong></h4>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试总结</title>
      <link href="2021/03/22/nichijou/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
      <url>2021/03/22/nichijou/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>面试相关: </p><ol><li><p>只有静态内部内才可以有静态变量, 非静态不可以, 非静态jvm在加载父类并不会初始化内部类.</p></li><li><p>Try-finally-return</p><ol><li>finally语句一定会执行</li><li>如果在try和catch, finally中都有return语句, 那么最终返回的是finally的返回值. 因为finally一定会执行, 而执行到return语句后就会返回, 所以jvm会在try和catch返回之前执行finally, 所以会返回finally中的return.</li></ol></li><li><p>序列化Serizalizable实现接口标记可将对象转换成一个字节数组, 并从字节数据恢复对象.</p><ol><li>使用serialVersionUID验证一致性. 如果不一致抛出异常. 如果不指定该id, 那么如果反序列化之前修改了类的结构, 会报错. 如果指定了id且修改了属性, 反序列化可能恢复部分数据, 也可能恢复不了数据.</li></ol></li><li><p>对象深拷贝和浅拷贝</p><ol><li>实现Cloneable接口, 标记可以调用clone方法. clone方法是定义在Object对象中的. </li><li>实现深拷贝可以重新定义对象, 并拷贝值到新建的对象中, 并返回. 也可以通过序列化机制进行深拷贝. 通过ObjectOutPutStream, ObjectInputStream进行实现.</li></ol></li><li><p>BIO: </p></li><li><p>异常:</p><ol><li>顶层是Trowable接口, 主要分为2类: Error和Exception</li><li>Error是程序无法处理的异常, 有JVM产生抛出, 比如OutOfMemoryError和StackOverFlowError. </li><li>Exception是程序可以处理的异常, 分为两大类: 受检异常和非受检异常(运行时异常和非运行时异常). </li><li>受检异常必须进行try-catch或throw, 常见的受检异常: ClassNotFoundException, IOExcetion, InterruptedException</li><li>非受检异常不需要进行try-catch和trow, 常见非受检异常: NullPointerException, IndexOutOfBoundException, ArithemeticException, ClassCastException, NumberFormatException</li></ol></li><li><p>泛型</p><ol><li>? 通配符 pecs(prodecer extends consumer super)</li><li>? extends T, 只能知道?的类是继承自T的, 不知道存的具体类型是什么, 可能是子类, 所以不能增加, 但是可以取出来, 因为是T的子类, 取出的元素可以转为T类, 或者T的父类型.</li><li>? super T, 可以用于存放, 因为不知道?是T的具体哪一个父类, 所以取出来的时候只能是Object类型, 因为Object是所有类的父类. 但是存放的时候只要是T及其子类都可以存放, 因为T及其子类一定有相同的父类.</li><li>泛型擦除, 编译时会将泛型擦除为限定类型, 如果没有限定类型就使用Object.</li></ol></li><li><p>设计原则</p><ol><li>单一职责原则: 一个类只做一件事情</li><li>里式替换原则: 任何使用父类的地方, 都可以使用子类去替换</li><li>依赖倒置/面向接口编程: 高层模块不依赖底层模块具体实现, 都依赖其抽象, 抽象不依赖细节, 细节依赖于抽象.</li><li>接口隔离原则: 使用多个专门的接口代替一个统一的接口.</li><li>迪米特法则: 一个类对依赖的类知道的越少越好. 即依赖的类应该将负责的逻辑封装在内部.</li><li>开闭原则: 多拓展开放, 对实现关闭</li><li>合成复用原则: 多使用组合和聚合, 少使用继承</li></ol></li><li><p>设计模式</p><ol><li>代理模式是对被代理者的功能的增强. 装饰器是对被装饰者添加额外的功能. 适配器是将一个接口转换成另一个合适的接口.</li><li>工厂模式</li><li>抽象工厂模式</li><li>单例模式</li><li>构造者模式</li></ol></li><li><p>JDK中的设计模式</p><ol><li>构造器模式: StringBuilder</li><li>装饰器模式: io中的一系列实现</li><li>代理模式: 动态代理 InvocationHandler</li><li>策略模式: Comparator</li><li>模板方法模式: AbstractList, AbstractMap等</li><li>迭代器模式: Iterator</li><li>责任链: Filter</li></ol></li><li><p>Spring中的设计模式</p><ol><li>抽象工厂: BeanFactory</li><li>代理: Aop</li><li>模板方法: AbstractApplicationContext</li><li>单例模式: Spring默认创建的对象就是单例模式</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="2021/03/22/java/jvm/class_init/"/>
      <url>2021/03/22/java/jvm/class_init/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><p>一个类型从被加载到虚拟机内存开始, 到卸载除内存为止, 整个生命周期将会经历<code>加载(Loading), 验证(Verificatoin), 准备(Preparation), 解析(Resolution), 初始化(Initialization), 使用(Using), 和卸载(Unloading)</code>七个阶段. 其中验证, 准备, 解析三个部分统称为连接(Linking). 七个阶段发生顺序如下:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/jvm/jvm_class_lifecycle.png" alt="Java类生命周期" loading="lazy"><em>Java类生命周期</em></p><p>加载, 验证, 准备, 初始化和卸载五个阶段的顺序是确定的, 类加载过程必须按照这种顺序<strong>开始(不是进行和完成, 这些阶段通常都是交叉进行的, 会在一个阶段执行的过程中调用, 激活另一个阶段)</strong>. 解析阶段不确定: 某些情况下可以在初始化阶段开始之后再开始, 这是为了支持Java的运行时绑定的特性(动态绑定).</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>Java虚拟机规范规定了<strong>有且只有</strong>六种情况必须立即对类型进行初始化, 也称这些情况为<strong>主动引用</strong>:</p><ol><li>遇到new, getstatic, putstatic, invokestatic这四条字节码指令时, 如果类型没有进行过初始化, 则需要触发其初始化. 能够生成这些指令的典型Java代码场景有:</li></ol><ul><li>使用new关键字实例化对象</li><li>读取或设置一个类型的静态字段的时候(被final修饰或已在编译期将结果放入常量池的静态字段除外, 不会触发类型初始化).</li><li>调用类型的静态方法的时候</li></ul><ol start="2"><li>使用java.lang.reflect包的方法对类型进行反射调用时, 如果类型尚未初始化, 需要触发其初始化.</li><li>当初始化类时, 发现父类尚未初始化, 先进行父类初始化.</li><li>当虚拟机启动时, 用户需指定一个要执行的主类(包含main()方法的类), 虚拟机会先初始化这个主类.</li><li></li><li>一个接口中定义了默认方法(default关键字修饰), 如果有这个接口的实现类发生了初始化, 那么先初始化该接口(如果不存在default关键字, 将不会初始化该接口).</li></ol><p>除以上主动引用之外, 所有引用都不会触发初始化, 称为<strong>被动引用</strong>. 下面看一下被动引用的例子:</p><ol><li><p><strong>通过子类引用父类的静态字段</strong>, 只触发父类初始化, 不触发子类初始化.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init super"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> desc <span class="token operator">=</span> <span class="token string">"super class"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 只会打印出init super</span>        <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token class-name">SubClass</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>通过数组定义来引用类</strong>, 不会触发类的初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 父类还是使用1中代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编译期存入调用类的常量池</strong>, 本质上没有引用到定义常量的类, 不会触发初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"const class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 定义常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc <span class="token operator">=</span>  <span class="token string">"const"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不会有任何输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token class-name">ConstClass</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾收集</title>
      <link href="2021/03/22/java/jvm/gc/"/>
      <url>2021/03/22/java/jvm/gc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合</title>
      <link href="2021/03/21/spring/ssm/"/>
      <url>2021/03/21/spring/ssm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="2021/03/17/java/proxy/"/>
      <url>2021/03/17/java/proxy/</url>
      
        <content type="html"><![CDATA[<p>代理模式对被代理对象添加额外功能.</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>看一下静态代理的例子:<br>首先定义一个简单的接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现该接口, 作为被代理的角色:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleInterface</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do other..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现一个代理类, 该代理类用于在调用SimpleImpl方法前进行日志记录. 该代理类实现<code>SimpleInterface</code>接口, 并在内部保存一个<code>SimpleImpl</code>对象, 实现<code>SimpleInterface</code>接口的方法实际上是调用SimpleImpl对象的实现方法, 并提供一些其他功能.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleProxy</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleImpl</span> simple<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleProxy</span><span class="token punctuation">(</span><span class="token class-name">SimpleImpl</span> simple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simple <span class="token operator">=</span> simple<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do log..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端使用代理类进行功能调用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleInterface</span> simpleInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 静态代理</span>        <span class="token class-name">SimpleProxy</span> simpleProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleProxy</span><span class="token punctuation">(</span>simpleInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleProxy<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleProxy<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>JDK动态代理可以通过Java动态实现代理类. 通过实现InvocationHandler接口, 完成对对象方法调用增强. InvocationHandler接口定义如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span><span class="token comment">/**     * 调用代理对象的方法, 添加自定义实现, 完成代理     * @param proxy 调用方法的代理对象     * @param method 代理对象执行的方法     * @param args 方法的参数     * @return 返回方法执行结果     * @throws Throwable     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JDK动态代理实现日志功能"><a href="#使用JDK动态代理实现日志功能" class="headerlink" title="使用JDK动态代理实现日志功能"></a>使用JDK动态代理实现日志功能</h3><p>首先定义代理对象实现InvocationHandler接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkDynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 被代理的对象</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> proxied<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JdkDynamicProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxied<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxied <span class="token operator">=</span> proxied<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 可以通过判断条件, 指定哪些方法需要增强, 例如只增强名称为func1的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"func1"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxied<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Jdk dynamic proxy log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getJdkProxy</span><span class="token punctuation">(</span><span class="token class-name">T</span> proxied<span class="token punctuation">,</span> <span class="token class-name">Class</span> proxiedInterFace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JdkDynamicProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicProxy</span><span class="token punctuation">(</span>proxied<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>proxied<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>proxiedInterFace<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>method.invoke()</code>方法接收两个参数: </p><ul><li>proxied: 被代理的对象, 即哪个对象的方法被调用</li><li>args: 方法的参数</li></ul><p>在<code>getJdkProxy</code>方法中, 使用了JDK提供的<code>Proxy.newProxyInstance()</code>进行代理对象的创建, 该方法接受三个参数:</p><ul><li>ClassLoader loader: 类加载器, 直接使用代理对象的类加载器即可</li><li>Class&lt;?&gt;[] interfaces: 被代理的接口, JDK的动态代理只能进行接口代理</li><li>InvocationHandler h: 代理对象, 即实现了InvocationHandler的对象.</li></ul><p>通过<code>newProxyInstance</code>方法, Java会动态的生成一个代理类供我们使用. 但是JDK的动态代理仅支持实现接口的方式. 如果想要对类进行代理, 那么需要使用cglib.</p><p>客户端测试代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleInterface</span> simpleInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// jdk动态代理</span>        <span class="token class-name">SimpleInterface</span> jdkProxy <span class="token operator">=</span> <span class="token class-name">JdkDynamicProxy</span><span class="token punctuation">.</span><span class="token function">getJdkProxy</span><span class="token punctuation">(</span>simpleInterface<span class="token punctuation">,</span> <span class="token class-name">SimpleInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdkProxy<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdkProxy<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><p>cglib可以对普通类实现生成代理, 实现增强.<br>首先需要创建Enhancer实例, 然后调用<code>setSuperclass()</code>方法设置需要代理的父类, 调用<code>setCallback()</code>设置回调类, 最后调用<code>create()</code>方法创建一个代理.</p><p>cglib创建动态代理:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib log."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getCglibProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CglibProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置回调类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建代对象</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端测试代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleInterface</span> simpleInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cglib动态代理, 这里的getClass将会得到SimpleImpl类</span>        <span class="token class-name">SimpleInterface</span> cglibProxy <span class="token operator">=</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">.</span><span class="token function">getCglibProxy</span><span class="token punctuation">(</span>simpleInterface<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibProxy<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibProxy<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务管理</title>
      <link href="2021/03/16/spring/transaction/"/>
      <url>2021/03/16/spring/transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库事务相关"><a href="#数据库事务相关" class="headerlink" title="数据库事务相关"></a><strong>数据库事务相关</strong></h2><p>介绍Spring事务相关之前, 先介绍一下数据库有关事务内容.<br>数据库四大特性: ACID</p><ul><li>Atomicity(原子性): 事务要么成功, 要么失败.</li><li>Consistency(一致性): 系统从一个正确的状态迁移到另一个正确的状态.</li><li>Isolation(隔离性): 允许多个事务并发执行, 事务不会被其他事务影响.</li><li>Durability(持久性): 事务处理结束后对数据的修改是永久的, 即使系统故障也不会丢失.</li></ul><p>其中Isolation又分为四个等级:</p><ul><li>read uncommited(未提交读)</li><li>read commited(提交读)</li><li>repeatable read(可重复读)</li><li>serilizable(串行化)</li></ul><p>由于不同的隔离策略, 并发时可能产生以下问题:</p><ul><li>脏读: 事务T1读取数据, 此时事务T2修改了T1读取的数据, 但未做提交, 而T1读取到了T2修改的数据, 这种情况就称为脏读.</li><li>不可重复读: 事务T1在一次事务中根据同一条件多次读取数据, 事务T2在T1读取间隔内修改了T1读取的数据, 导致T1多次读取的数据不一致, 称为不可重复读.</li><li>幻读: 事务T1在一次事务中根据同一条件多次读取数据, 事务T2在T1读取的间隔内增加或删除了T1读取的数据, 导致T1多次读取的数据变多/变少了, 称为幻读.</li></ul><p><strong>NB:</strong><br>不可重复读和幻读区别在于不可重复读是修改数据, 而幻读是增加/减少了数据.</p><h2 id="Spring事务管理抽象"><a href="#Spring事务管理抽象" class="headerlink" title="Spring事务管理抽象"></a><strong>Spring事务管理抽象</strong></h2><p>Spring 使用TransationManager进行事务管理抽象, 通常使用PlatformTransactionManager进行命令式的事务管理.<br>PlatformTransactionManager接口定义了一下方法:</p><ul><li>TransactionStatus getTransaction(TransactionDefinition definition: 获取事务状态.</li><li>void commit(TransactionStatus status): 提交事务</li><li>void rollback(TransactionStatus status): 回滚事务</li></ul><p>TransactionDefinition主要定义了以下内容:</p><ul><li>propagation: 事务传播属性</li><li>isolation: 事务隔离性级别</li><li>timeout: 事务运行时间, 超过改时间将由底层的事务管理器回滚事务.</li><li>read-only: 定义事务只读而不会修改数据.</li></ul><p>TransactionStatus用于控制事务和查询事务状态. TransactionStatus 继承了TransactionExecution, SavepointManager, Flushable接口.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionExecution</span><span class="token punctuation">,</span> <span class="token class-name">SavepointManager</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">&#123;</span><span class="token comment">// 是否存在保存点</span><span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TransactionExecution主要定义了一些表示当前事务状态的接口. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionExecution</span> <span class="token punctuation">&#123;</span><span class="token comment">// 事务是否是新的事务</span><span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将事务属性设置为只能回滚</span><span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事务是否只能回滚</span><span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事务是否已经完成</span><span class="token keyword">boolean</span> <span class="token function">isCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SavepointerManager定义了一些管理事务保存点的接口, 创建, 回滚事务保存点等.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SavepointManager</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建保存点</span><span class="token class-name">Object</span> <span class="token function">createSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span><span class="token comment">// 回滚到保存点</span><span class="token keyword">void</span> <span class="token function">rollbackToSavepoint</span><span class="token punctuation">(</span><span class="token class-name">Object</span> savepoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span><span class="token comment">// 释放保存点</span><span class="token keyword">void</span> <span class="token function">releaseSavepoint</span><span class="token punctuation">(</span><span class="token class-name">Object</span> savepoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面具体介绍一下TransactionDefinition中定义的事务传播属性.</p><h2 id="Spring事务传播属性"><a href="#Spring事务传播属性" class="headerlink" title="Spring事务传播属性"></a><strong>Spring事务传播属性</strong></h2><p>TransactionDefinition中定义了如下传播属性:</p><ul><li>PROPAGATION_REQUIRED</li><li>PROPAGATION_SUPPORTS</li><li>PROPAGATION_MANDATORY</li><li>PROPAGATION_REQUIRES_NEW</li><li>PROPAGATION_NOT_SUPPORTED</li><li>PROPAGATION_NEVER</li><li>PROPAGATION_NESTED</li></ul><p>Spring提供了<code>Propagation</code>枚举类来映射到<code>TransactionDefinition</code>的传播属性:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Propagation</span> <span class="token punctuation">&#123;</span><span class="token function">REQUIRED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_REQUIRED<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUPPORTS</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_SUPPORTS<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MANDATORY</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_MANDATORY<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">REQUIRES_NEW</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NOT_SUPPORTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_NOT_SUPPORTED<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NEVER</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NESTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token class-name">Propagation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a><strong>PROPAGATION_REQUIRED</strong></h3><blockquote><p>Spring默认的事务传播行为. 支持当前事务, 如果不存在事务就创建一个新的事务.</p></blockquote><p><strong>NB: Spring通过Aop进行事务控制, 所以只要理解Aop的触发时机就可以容易理解事务的传播机制.</strong></p><p>下面看一下具体的例子: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Transaction</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// NB: 这里调用的并不是代理类中的doFunc()方法, 而是被代理的普通方法.</span><span class="token function">doFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 处理...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Transaction</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果调用A接口的func函数, 由于不存在事务, A会新建一个事务, A中调用B中的事务时, B将会使用A中的事务. 如果B中的事务发生异常, 那么A, B全部回滚. A中事务发生异常, A, B全部回滚.  </p><p>看一下B发生异常的情况(默认A不发生异常):</p><ul><li>B发生异常但是不抛出异常, Sprig Aop无法捕获异常, 正常执行, 事务不会回滚.</li><li>B发生异常并抛出, 且A也抛出异常, A, B都会回滚.</li><li>B发生异常且B抛出该异常, A进行捕获, 并且A不抛出异常, A, B都会回滚. 原理: B中发生异常, Spring的Aop捕获到该异常, 并将事务的状态设置为rollback-only(只能回滚), 由于A, B是同一个事务, 但是A中捕获了该异常, 并未抛出, A在提交事务时, 发现只能回滚事务, 所以抛出了<code>org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</code>异常, 并且回滚了事务.</li></ul><p>看一下A发生异常的情况(默认B不发生异常):</p><ul><li>A发生异常并抛出, A, B都会回滚</li><li>A发生异常但是不抛出, 正常提交事务.</li></ul><p>假设A方法存在事务, A方法中调用B方法, 则B方法也使用A方法的事务.<br>Spring官方的解释:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/tx_prop_required.png" alt="prop-required" loading="lazy">_PROPAGATION_REQUIRED_</p><h3 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a><strong>PROPAGATION_SUPPORTS</strong></h3><blockquote><p>支持当前事务, 如果当前域存在事务, 就以当前事务执行, 如果不存在事务, 就以非事务方式执行.</p></blockquote><h3 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a><strong>PROPAGATION_MANDATORY</strong></h3><blockquote><p>支持当前事务, 如果不存在事务, 抛出异常</p></blockquote><h3 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a><strong>PROPAGATION_REQUIRES_NEW</strong></h3><blockquote><p>不管是否存在事务, 都会新建一个事务.</p></blockquote><p>Spring官方解释:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/spring/tx_prop_requires_new.png" alt="prop-required" loading="lazy"><em>PROPAGATION_REQUIRES_NEW</em></p><h3 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a><strong>PROPAGATION_NOT_SUPPORTED</strong></h3><blockquote><p>不支持事务, 不管是否存在事务, 都会以非事务方式执行.</p></blockquote><h3 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a><strong>PROPAGATION_NEVER</strong></h3><blockquote><p>不支持事务, 如果存在事务, 抛出异常. 不存在事务以非事务方式运行.</p></blockquote><h3 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a><strong>PROPAGATION_NESTED</strong></h3><blockquote><p>如果存在事务, 使用内嵌事务, 如果不存在事务, 则新建一个事务.<br>使用内嵌事务: 内嵌事务如果抛出异常, 内嵌事务回滚, 而父事务不会回滚父事务如果抛出异常, 则父事务和内嵌事务都需要回滚.</p></blockquote><h2 id="Spring隔离级别"><a href="#Spring隔离级别" class="headerlink" title="Spring隔离级别"></a>Spring隔离级别</h2><p><code>TransactionDefinition</code>定义了以下几个隔离级别:</p><ul><li>ISOLATION_DEFAULT</li><li>ISOLATION_READ_UNCOMMITTED</li><li>ISOLATION_READ_COMMITTED</li><li>ISOLATION_REPEATABLE_READ</li><li>ISOLATION_SERIALIZABLE</li></ul><p>Spring同时定义了<code>Isolation</code>枚举类对应以上级别:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Isolation</span> <span class="token punctuation">&#123;</span><span class="token function">DEFAULT</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>ISOLATION_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">READ_UNCOMMITTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>ISOLATION_READ_UNCOMMITTED<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">READ_COMMITTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>ISOLATION_READ_COMMITTED<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">REPEATABLE_READ</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>ISOLATION_REPEATABLE_READ<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SERIALIZABLE</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>ISOLATION_SERIALIZABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token class-name">Isolation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ISOLATION-DEFAULT"><a href="#ISOLATION-DEFAULT" class="headerlink" title="ISOLATION_DEFAULT"></a>ISOLATION_DEFAULT</h3><blockquote><p>使用数据库默认级别</p></blockquote><p>Oracle: Read committed<br>Mysql: Repeatable read</p><p>Oracle数据库只支持Read committed和Serializable两种隔离等级, 所以Oracle不存在脏读的现象, 但是默认的Read committed 也无法解决不可重复读和幻读的问题.</p><h3 id="ISOLATION-READ-UNCOMMITTED"><a href="#ISOLATION-READ-UNCOMMITTED" class="headerlink" title="ISOLATION_READ_UNCOMMITTED"></a>ISOLATION_READ_UNCOMMITTED</h3><blockquote><p>读未提交, 可能会导致脏读</p></blockquote><h3 id="ISOLATION-READ-COMMITTED"><a href="#ISOLATION-READ-COMMITTED" class="headerlink" title="ISOLATION_READ_COMMITTED"></a>ISOLATION_READ_COMMITTED</h3><blockquote><p>读已提交, 不会导致脏读, 但是会存在不可重复读, 和幻读问题</p></blockquote><h3 id="ISOLATION-REPEATABLE-READ"><a href="#ISOLATION-REPEATABLE-READ" class="headerlink" title="ISOLATION_REPEATABLE_READ"></a>ISOLATION_REPEATABLE_READ</h3><blockquote><p>重复读, 解决脏读, 不可重复读, 但还是存在幻读问题</p></blockquote><h3 id="ISOLATION-SERIALIZABLE"><a href="#ISOLATION-SERIALIZABLE" class="headerlink" title="ISOLATION_SERIALIZABLE"></a>ISOLATION_SERIALIZABLE</h3><blockquote><p>串行化, 脏读, 不可重复读, 幻读都可以解决, 通常情况下不会使用该隔离级别</p></blockquote><h2 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Transactional</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 指定事务管理器</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 定义事务标签, 用于描述事务</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 事务传播属性, 默认REQUIRED</span><span class="token class-name">Propagation</span> <span class="token function">propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">;</span>    <span class="token comment">// 事务的隔离级别, 默认DEFAULT</span><span class="token class-name">Isolation</span> <span class="token function">isolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment">// 事务超时时间(秒)</span><span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">timeoutString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 如果事务是只读的可以将该标志设置为true, 从而获得运行时优化</span>    <span class="token comment">// 并不保证只读事务在进行写事务时会抛出异常.</span><span class="token keyword">boolean</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 定义异常回滚, 表示发生该异常进行回滚</span>    <span class="token comment">// 默认情况下发生RuntimeException和Error时会进行回滚, 但是受检的异常不会回滚</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 异常回滚全限定类名</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置不回滚的异常, 如果异常同时存在于rollbackFor()中, 将会回滚异常.</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 异常不会滚全限定类名</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">noRollbackForClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap详解</title>
      <link href="2021/03/15/java/base/hashmap/"/>
      <url>2021/03/15/java/base/hashmap/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap中的hash方法的作用"><a href="#HashMap中的hash方法的作用" class="headerlink" title="HashMap中的hash方法的作用"></a><strong>HashMap中的hash方法的作用</strong></h3><p>HashMap中提供了<code>hash()</code>函数在调用<code>key.hashCode()</code>得到原始哈希码之后, 再进行一次hash, 称之为扰动函数. 将key的高16位与低16位进行异或, 减少hash冲突几率.<br>HashMap中设置key和获得key都是通过<code>(n - 1) &amp; hash</code>进行的(相当于hash%n, 但是效率较高), 其中n是HashTable的大小. 这样进行计算, 如果只取后几位, 哈希碰撞的概率比较高. 而使用了扰动函数, 混合了原始哈希码的高位和低位, 加大了低位的随机性, 降低了碰撞几率.</p><p>JDK1.8 hash函数源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashMap属性及其意义"><a href="#HashMap属性及其意义" class="headerlink" title="HashMap属性及其意义"></a><strong>HashMap属性及其意义</strong></h3><ul><li>DEFAULT_INITIAL_CAPACIT = 1 &lt;&lt; 4, 默认的HashMap容量.</li><li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30, 最大容量.</li><li>DEFAULT_LOAD_FACTOR = 0.75f, 装载因子</li><li>TREEIFY_THRESHOLD = 8, 链表转红黑树的阈值</li><li>UNTREEIFY_THRESHOLD = 6, 红黑树转链表的阈值</li><li>MIN_TREEIFY_CAPACITY = 64, 链表转红黑树的最小容量值, 当map的容量小于该值时, 即使hash相同的链表长度大于8也不会转换成红黑树, 而是进行扩容.</li><li>loadFactor, 实际的装载因子</li><li>size, map的实际长度, 即当前map中存在size个key-value. 当<code>size &gt; threshold</code>时, 将会触发扩容.</li><li>threshold, 扩容的阈值, <code>threshold = capacity * loadFactor</code></li><li>capacity, map的容量</li></ul><h3 id="为什么HashMap的长度是2-n"><a href="#为什么HashMap的长度是2-n" class="headerlink" title="为什么HashMap的长度是2^n?"></a><strong>为什么HashMap的长度是2^n?</strong></h3><p>使用hashcode &amp; (length - 1)取模效率高于 hashcode % length. 同时也解决了hashcode是负数的问题.</p><h3 id="如何保证长度是2-n"><a href="#如何保证长度是2-n" class="headerlink" title="如何保证长度是2^n?"></a><strong>如何保证长度是2^n?</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// n无符号右移一位 | n, 这样如果n存在一个1那么该1的下一个位置也变成了1</span><span class="token comment">// 假设n二进制是: 0100 0000(省略了前面的24个0), 则该操作后n为: 0110 0000</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 同样操作, 一共至少四位完成了1的复制</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 接着是8位</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 然后是16位</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// 32位全都完成</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存区域</title>
      <link href="2021/03/09/java/jvm/jvm_memory_area/"/>
      <url>2021/03/09/java/jvm/jvm_memory_area/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>JVM所管理的内存包括以下几个运行时数据区域:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/jvm/jvm_runtime_data_area.png" alt="java运行时数据区" loading="lazy"><em>Java运行时数据区</em></p><h3 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器(Program Counter Register)"></a>程序计数器(Program Counter Register)</h3><p>PC是一块较小的内存空间, 可以看做当前线程所执行的字节码的行号指示器. JVM字节码解释器工作时就是通过改变PC来选取下一条需要执行的字节码指令. 分支,循环, 跳转, 异常处理, 线程恢复等都需要依赖PC来完成.<br>为了线程切换后能恢复到正确的位置, 每个线程都需要一个独立的PC, 各个线程的PC互不影响, 独立存储, 称这类内存区域为线程私有的内存.<br>如果线程正在执行一个java方法, 则PC记录的是正在执行的JVM字节码地址; 如果正在执行的是本地(Native)方法, PC数值应为空(Undefined). <strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域.</strong></p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>Java虚拟机栈(Java Virtual Machine Stack)也是线程私有的, 生命周期与线程相同. 虚拟机栈是描述Java方法执行的线程内存模型: 每个方法执行时, JVM都会同步创建一个栈帧(Stack Frame)存储局部变量表, 操作数栈, 动态链接, 方法出口等信息. 每个方法被调用直到执行完毕的过程, 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程.  </p><p><strong>局部变量表</strong>存储编译期可知的各种Java虚拟机<strong>基本数据类型</strong>(boolean, byte, char, short, int, float, long, double), <strong>对象引用</strong>(reference类型, 并不等同于对象本身, 可能是一个指向对象起始地址的引用指针, 也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和<strong>returnAddress</strong>类型(指向了一条字节码指令的地址).</p><p>这些数据类型在局部变量表中的局部空间以局部变量槽(Slot)来表示, <strong>64位的long和double</strong>类型数据占用两个变量槽, 其余数据类型占用一个变量槽. 局部变量表所需的内存空间在编译期完成分配, 当进入一个方法时, 这个方法在栈帧中需要分配多大的局部空间是完全确定的, 在方法运行期间不会改变局部变量表的大小. 这里的大小是指变量槽的数量, JVM使用多大的内存空间(例如1个变量槽占32bit/64bit等)实现一个变量槽, 由JVM自行决定.</p><p>Java虚拟机规范对此内存区域规定了两类异常状况:</p><ul><li>线程请求的栈深度大于JVM所允许的深度, 抛出StackOverFlowError异常</li><li>如果Java虚拟机栈可以动态扩展, 当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常.</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈(Native Method Stacks)与虚拟机栈发挥作用相似, 区别在于虚拟机栈为虚拟机执行Java方法(字节码)服务, 本地方法栈为虚拟机使用本地(Native)方法服务.</p><p>Java虚拟机规范对本地方法栈使用语言, 方式及数据结构没有强制规定, 虚拟机可以根据需求自由实现.Hot-Spot直接将本地方法栈与虚拟机栈合二为一. 与虚拟机栈一样, 本地方法栈在栈深度溢出或栈拓展失败时分别抛出StackOverFlowError和OutOfMemoryError异常.</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆(Java Heap)是虚拟机管理的内存中最大的一块. Java堆被所有线程共享, 在虚拟机创建的时候创建. 其唯一目的就是存放对象实例, Java<strong>几乎</strong>所有对象实例都在堆中分配.</p><p>Java堆是垃圾收集器管理的内存区域, 因此也称GC堆(Garbage Collected Heap).<br>根据Java虚拟机规范规定, Java堆可以处于物理上不连续的内从空间内, 但在逻辑上视为连续的. 对于大对象(如数组对象), 大多JVM出于实现简单, 存储高效考虑, 可能会要求连续的内存空间.</p><p>Java堆既可以被实现为固定大小, 也可以是可拓展的. 主流的JVM都是按照可拓展来实现的(通过-Xmx和-Xms设置). 如果Java堆中没有内存完成实例分配, 并且堆也无法拓展时, JVM会抛出OutOfMemoryError异常.</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区(Method Area)也是线程共享的内存区域, 用于存储已被虚拟机加载的类型信息, 常量, 静态变量, 即时编译器编译后的代码缓存等数据. Java虚拟机规范<br>把方法区描述为堆的逻辑部分, 但是它却有一个名叫”非堆”(Non-Heap)的别名, 目的是与Java堆区分开.</p><p>Java虚拟机规范规定, 如果方法区无法满足新的内存分配需求时, 抛出OutOfMemoryError异常.</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池(Runtime Constant Pool) 是方法区的一部分. Class文件中除了有类的版本, 字段, 方法, 接口等描述信息外, 还有一项信息是常量池表(Constant Pool Table), 用于存放编译期生成的字面量与符号的引用, 这部分内容将在类加载后存放到方法区的运行时常量池中.</p><p>JVM对于Class文件的每一部分(包括常量池)有严格的规定, 每个字节用于存储何种数据类型都要符合要求. 但是JVM对于运行时常量池没有细节要求. 一般来说, 除了保存Class文件中的描述的符号引用外, 还会把符号引用翻译出来的直接引用也存储在运行时常量池中.</p><p>运行时常量池并不一定只有编译期才能产生, 也就是说并不是预置入Class文件的常量池的内容才能进入方法区的运行时常量池, 运行期间也可以将新的常量放入池中, 若String的intern方法.</p><p>既然是方法区的一部分, 那么如果方法区无法申请到内存, 就会抛出OOM异常.</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存(Dierect Memory) 并不是JVM运行时数据区的一部分, 也不是Java虚拟机规范定义的内存区域, 但是被频繁使用, 也可能导致OutOfMemory异常出现.</p><p>Java的NIO引入了基于通道(Channel)与缓冲区(Buffer)的I/O方式, 可以使用Native函数库直接分配堆外内存, 然后通过存储在Java堆里的DirectByteBuffer对象作为这块内存的引用进行操作. 这样避免了在Java堆和Native堆中来回复制数据, 提高了效率.</p><p>直接内存不会受到Java堆大小的限制, 但是会受本机总内存限制. 如果Java申请的总内存大于物理内存, 动态拓展时会抛出OOM异常.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="2021/03/08/java/concurrent/thread_pool/"/>
      <url>2021/03/08/java/concurrent/thread_pool/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池使用原因"><a href="#线程池使用原因" class="headerlink" title="线程池使用原因"></a>线程池使用原因</h2><ul><li>现阶段java线程实现是1:1的, 即与操作系统的轻量级进程(内核线程的一种高级接口)是一一对应的. 创建和销毁线程消耗较多系统资源. 线程池可以复用线程资源.</li><li>可以控制并发的数量.</li><li>可以对线程进行统一的管理.</li></ul><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>线程池的顶级接口是<code>Executor</code>, 该接口定义了一个方法<code>execute</code>. 下面看一下接口的定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p>Executor有一个拓展接口ExecutorService, 常用的ThreadPoolExecutor就是实现了该接口. 下面来看一下ExecutorService的定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span><span class="token comment">// 有序执行已提交任务的shutdown方法</span>    <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尝试停止所有执行的任务, 暂停等待中的任务, 返回等待执行任务的列表</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前执行器是否已停止</span>    <span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果在调用shutdown方法后所有的任务都完成了返回ture. 在调用shutdown或shutdownNow方法前, 该方法永远返回false.</span>    <span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 阻塞直到所有任务在shutdown请求之后全部完成, 或者timeout到期, 或当前线程中断. 如果当前执行器终止返回true, 如果经过了timeout还未终止返回false.</span>    <span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token comment">// 提交一个callable任务, 返回到Future中</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提交一个runnable任务, 并给定一个默认返回值result, 如果任务成功执行, Future的get方法将返回该result.</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提交一个runnable任务.</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用所有callable任务, 任务完成后返回Future列表, 列表中所有的Future.isDone方法将返回true. 返回的Future顺序与tasks的顺序一一对应.</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token comment">// 调用给定的tasks, 当任务全部完成或经过timeout时间后返回Future列表, 列表中的Future.isDone将返回true. 如果返回的Future如果未完成就被全部取消. 返回的Future顺序与tasks一一对应.</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span>                                  <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token comment">// 执行给定的tasks, 返回一个已经完成的任务的结果.</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token comment">// 执行给定的tasks, 如果在给定的timeout结束之前完成, 返回一个完成的任务结果.</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks<span class="token punctuation">,</span>                    <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>ThreadPoolExecutor是ExecutorService的一个具体实现, 首先看一下其构造方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>  <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>  <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>  <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>  <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>  <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>  <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>  <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>  <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>  <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>  <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>  <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>  <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>  <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span><span class="token keyword">null</span> <span class="token operator">:</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出ThreadPoolExecutor最多有7个参数的构造函数, 下面具体看一下这7个参数.</p><ul><li>int corePoolSize<br>核心线程数量<br>线程池中有两类线程: 核心线程和非核心线程. 核心线程默认情况下一直存在于线程池中, 即使这个核心线程是空闲的. 而非核心线程超过存活时间就会被销毁.</li><li>int maximumPoolSize<br>最大线程数量<br>核心线程数量 + 非核心线程数量</li><li>long keepAliveTime<br>线程存活时间<br>非核心线程处于空闲状态超过这个时间就会被销毁. 如果设置了allCoreThreadTimeOut(true), 那么核心线程也会受到影响.</li><li>TimeUnit unit<br>keepAliveTime存活时间单位</li><li>BlockingQueue<Runnable> workQueue<br>阻塞队列, 维护等待执行的Runnable对象.<br>常用的几个阻塞队列:<ul><li>LinkedBlockingQueue<br>链式阻塞队列, 底层是链表, 默认大小是Integer.MAX_VALUE.</li><li>ArrayBlockingQueue<br>数组阻塞队列, 底层是数组, 需要指定队列的大小.</li><li>SynchronousQueue<br>同步队列, 内部容量为0, 每个put操作必须等待take操作, 反之亦然.</li><li>DelayQueue<br>延迟队列, 该队列中的元素只有当指定的延迟时间到了, 才能够从队列中获取到该元素.</li></ul></li></ul><p>前五个是必要参数, 后两个是非必要参数.</p><ul><li><p>ThreadFactory threadFactory<br>线程工厂<br>用于批量创建线程, 统一在创建线程时设置一些参数, 如是否守护线程, 线程优先级等. 如果不指定, 会创建一个默认的线程工厂, 如下(定义在Executors中):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> poolNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadGroup</span> group<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span><span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityManager</span> s <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>namePrefix <span class="token operator">=</span> <span class="token string">"pool-"</span> <span class="token operator">+</span>  poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-thread-"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span>  namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RejectedExecutionHandler handler<br>拒绝执行策略<br>线程数量大于线程数就会采用拒绝处理策略, 四种拒绝处理策略为:</p><ul><li>ThreadPoolExecutor.AbortPolicy: 默认拒绝处理策略, 丢弃任务并抛出RejectedExecutionException异常.</li><li>ThreadPoolExecutor.DiscardPolicy: 丢弃新来的任务, 但是不抛出异常.</li><li>ThreadPoolExecutor.DiscardOldestPolicy: 丢弃队列头部(最旧)的任务, 然后重新尝试执行程序(如果失败, 重复此过程).</li><li>ThreadPoolExecutor.CallerRunsPolicy: 由调用线程处理该任务.</li></ul></li></ul><h3 id="TODO-ThreadPoolExecutor底层原理"><a href="#TODO-ThreadPoolExecutor底层原理" class="headerlink" title="TODO ThreadPoolExecutor底层原理"></a>TODO ThreadPoolExecutor底层原理</h3><h2 id="常见的四种线程池"><a href="#常见的四种线程池" class="headerlink" title="常见的四种线程池"></a>常见的四种线程池</h2><p>Executors类提供了几个静态方法常见线程池, 以下是常见的线程池.</p><h3 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h3><p>创建固定大小的线程池, 所有线程都是核心线程<br>允许的请求队列的长度为Integer.MAX_VALUE, 可能会堆积大量的请求, 导致OOM.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SingleThreadExecutor"><a href="#SingleThreadExecutor" class="headerlink" title="SingleThreadExecutor"></a>SingleThreadExecutor</h3><p>仅有一个核心线程, 使用了LinkedBlockingQueue, 可能会堆积大量的请求, 导致OOM.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h3><p>没有核心线程, 非核心线程的数量可以是Integer.MAX_VALUE<br>如果任务进入队列成功, 当前没有空闲线程的情况下, 会创建新的非核心线程, 可能会创建大量的线程, 导致OOM.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h3><p>线程数量最大为Integer.MAX_VALUE, 可能会存在创建大量线程的情况, 导致OOM.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 调用super进行创建线程池</span><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 底层还是利用ThreadPoolExecutor进行创建</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>         <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread类详解</title>
      <link href="2021/03/04/java/concurrent/thread_class/"/>
      <url>2021/03/04/java/concurrent/thread_class/</url>
      
        <content type="html"><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>一个<code>Thread</code>就是一个在程序中执行的线程. JVM允许一个应用有多个并发执行的线程.<br>每个线程都有一个优先级, 优先级高的线程优先于优先级低的线程执行(并不是绝对的).<br>一个线程可能是守护线程. 当新建一个<code>Thread</code>对象时, 该对象的优先级继承自创建该对象的线程的优先级. 如果创建线程是守护线程, 那么该新线程也是守护线程.<br>JVM启动时, 通常只有一个非守护线程(调用指定类的main方法). 发生以下情况时, JVM停止执行线程:</p><ul><li>调用了<code>Runtime</code>类的exit方法, 并且安全管理器允许执行退出操作.</li><li>所有的非守护线程全部结束, 或者从<code>run</code>方法调用中返回, 或者从<code>run</code>方法中抛出了异常.</li></ul><h3 id="Thread初始化逻辑"><a href="#Thread初始化逻辑" class="headerlink" title="Thread初始化逻辑"></a><strong>Thread初始化逻辑</strong></h3><p>分析源码之前, 先看一下总结:</p><ul><li>构造新线程时可以传入需要执行的Runnable实例, 线程所属线程组, 线程期望的线程栈大小和线程名称.</li><li>如果传入的线程名称为null将会抛出异常.</li><li>若未传入所属线程组, 默认会使用父线程的线程组(安全管理器为空或未指定线程组的情况下)</li><li>设置新线程的优先级为创建线程的优先级</li><li>若创建程是守护线程设置新线程为守护线程, 否则设置为非守护线程</li><li>若未传入线程栈大小, 默认设置为0, 表示JVM可以忽略该参数</li><li>给新线程设置一个唯一的线程id</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h4><p>下面看一下Thread的构造方法, 可以看到构造函数中可以有以下参数:  </p><ul><li>ThreadGroup group: 指定线程所属线程组</li><li>Runnable target: 需要运行的线程方法</li><li>String name: 线程的名称</li><li>long stackSize: 线程栈期望的大小(实际大小由JVM决定), 如果是0表示忽略该参数</li></ul><p>所有构造方法都是调用了类中的init方法. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果没有传入name(线程名称), 自动生成一个线程名称, 以Thread-开头</span><span class="token comment">// 如果没有传入stackSize, 忽略该参数</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">// 不对外开放, 只提供给同包下类使用</span>   <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> acc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                 <span class="token keyword">long</span> stackSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">init</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> stackSize<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a><strong>init方法</strong></h4><p>接下来看一下具体执行初始化逻辑的<code>init(ThreadGroup g, Runnable target, String name, long stackSize, AccessControlContext acc, boolean inheritThreadLocals)</code>方法, <code>init</code>方法除了上述构造方法的参数还有以下额外参数:</p><ul><li>AccessControlContext acc: 访问控制上下文</li><li>boolean inheriThreadLocals: 如果为true, 从构造线程的可继承<code>thread-locals</code>中继承初始化值.</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>  <span class="token keyword">long</span> stackSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> stackSize<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行具体的初始化逻辑</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>  <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>  <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 线程名称不可为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">// 设置父线程</span><span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 存在安全管理器, 使用安全管理器中的getThreadGroup方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>g <span class="token operator">=</span> security<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 不存在安全管理器或安全管理器中的ThreadGroup为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>g <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 检查是否有访问权限</span>g<span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCCLOverridden</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>security<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>SUBCLASS_IMPLEMENTATION_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 调用线程组的addUnstarted, 将线程组中的未启动线程数量加1</span>g<span class="token punctuation">.</span><span class="token function">addUnstarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将新建的线程所属线程组设置为上述线程组</span><span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> g<span class="token punctuation">;</span>    <span class="token comment">// 复制创建线程的守护状态</span><span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 复制创建线程的优先级</span><span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置类加载器, 默认使用父线程的上下文类加载器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isCCLOverridden</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span>contextClassLoader<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inheritedAccessControlContext <span class="token operator">=</span>acc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> acc <span class="token operator">:</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存需要执行的target</span><span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token comment">// 设置优先级</span><span class="token function">setPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置线程栈大小</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span><span class="token comment">/* Set thread ID */</span><span class="token comment">// 设置线程id</span>tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下获取父线程的方法:</p><ul><li><code>currentThread</code>方法用于获取当前正在执行的thread对象, 是一个静态本地方法:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置优先级方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果优先级大于最大优先级或者小于最小优先级抛出异常.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">></span> MAX_PRIORITY <span class="token operator">||</span> newPriority <span class="token operator">&lt;</span> MIN_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 存在线程组才设置优先级</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g <span class="token operator">=</span> <span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 保证优先级不大于线程组的最大优先级</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">></span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newPriority <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用本地方法设置优先级</span><span class="token function">setPriority0</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> newPriority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init方法中获取线程id方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">++</span>threadSeqNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Thread字段解析"><a href="#Thread字段解析" class="headerlink" title="Thread字段解析"></a><strong>Thread字段解析</strong></h3><p>接下来看一下Thread中常用的字段.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程名称</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 优先级</span><span class="token keyword">private</span> <span class="token keyword">int</span> priority<span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">private</span> <span class="token class-name">Thread</span> threadQ<span class="token punctuation">;</span><span class="token comment">// 是否是守护线程</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> daemon <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 需要执行的任务</span><span class="token keyword">private</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">;</span><span class="token comment">// 线程所属线程组</span><span class="token keyword">private</span> <span class="token class-name">ThreadGroup</span> group<span class="token punctuation">;</span><span class="token comment">// 用于自动编号匿名线程</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> threadInitNumber<span class="token punctuation">;</span><span class="token comment">// 线程期望栈的大小</span><span class="token keyword">private</span> <span class="token keyword">long</span> stackSize<span class="token punctuation">;</span><span class="token comment">// 线程id</span><span class="token keyword">private</span> <span class="token keyword">long</span> tid<span class="token punctuation">;</span><span class="token comment">// 生成thread id的seq</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> threadSeqNumber<span class="token punctuation">;</span><span class="token comment">// java线程状态</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> threadStatus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 优先级最小值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 优先级默认值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 优先级最大值</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Thread方法解析"><a href="#Thread方法解析" class="headerlink" title="Thread方法解析"></a><strong>Thread方法解析</strong></h3><h4 id="nextThreadNum-生成匿名线程号"><a href="#nextThreadNum-生成匿名线程号" class="headerlink" title="nextThreadNum(): 生成匿名线程号"></a>nextThreadNum(): 生成匿名线程号</h4><p>创建新线程而没有传入线程名称时, 将调用该方法生成一个匿名线程号, 线程名称为<code>Thread-</code>加上该方法生成的number.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自动编号匿名线程</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> threadInitNumber<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nextThreadID-生成线程id"><a href="#nextThreadID-生成线程id" class="headerlink" title="nextThreadID(): 生成线程id"></a>nextThreadID(): 生成线程id</h4><p>创建线程时获取线程的唯一id</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">++</span>threadSeqNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="currentThread-获取当前线程"><a href="#currentThread-获取当前线程" class="headerlink" title="currentThread(): 获取当前线程"></a>currentThread(): 获取当前线程</h4><p>返回当前正在执行的线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="yield-线程释放cpu"><a href="#yield-线程释放cpu" class="headerlink" title="yield(): 线程释放cpu"></a><strong>yield(): 线程释放cpu</strong></h4><p>提示调度器当前线程想要释放cpu, 调度器可以忽略该提示, 所以调用该方法不一定释放cpu.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sleep-睡眠进程"><a href="#sleep-睡眠进程" class="headerlink" title="sleep: 睡眠进程"></a><strong>sleep: 睡眠进程</strong></h4><p>使当前进程进入睡眠状态<br><strong>该方法不会释放线程拥有的锁.</strong><br>如果在线程睡眠时, 其他线程中断该线程, 那么将会重置该线程状态, 同时抛出异常.<br>sleep方法有以下几个重载: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nanos <span class="token operator">></span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"nanosecond timeout value out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//还是使用毫秒级</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">>=</span> <span class="token number">500000</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nanos <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>millis<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="start-启动线程"><a href="#start-启动线程" class="headerlink" title="start(): 启动线程"></a><strong>start(): 启动线程</strong></h4><p>调用该方法进行启动线程; JVM会调用线程的<code>run</code>方法.<br><strong>该方法只能调用一次</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果线程不是NEW状态, 抛出异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程组中添加该线程, 并将线程组的未启动线程数-1, 启动线程数+1</span>group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 本地方法</span><span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 启动失败, 从线程组的启动集合中删除线程, 未启动线程数+1, 已启动线程数-1</span>group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* do nothing. If start0 threw a Throwable then  it will be passed up the call stack */</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="run-线程需要执行的方法"><a href="#run-线程需要执行的方法" class="headerlink" title="run(): 线程需要执行的方法"></a><strong>run(): 线程需要执行的方法</strong></h4><p>如果使用构造函数传入Runnable对象, 那么调用该对象的run()方法, 否则什么都不做.子类应该重写这个方法.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="exit-清理线程"><a href="#exit-清理线程" class="headerlink" title="exit(): 清理线程"></a>exit(): 清理线程</h4><p>在线程完全退出之前, 给线程机会进行清理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>group<span class="token punctuation">.</span><span class="token function">threadTerminated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>group <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>inheritedAccessControlContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>blocker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>uncaughtExceptionHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程中断相关"><a href="#线程中断相关" class="headerlink" title="线程中断相关"></a>线程中断相关</h4><h5 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h5><p>如果线程因调用该类的wait, join, sleep方法阻塞, 调用<code>interrupt</code>方法将会重置其中断状, 同时抛出InterruptedException.<br>如果线程因基于InterruptibleChannel的I/O操作阻塞, 那么该channel将会关闭,线程中断状态会被设置, 并抛出java.nio.channels.ClosedByInterruptException.<br>如果线程因 java.nio.channels.Selector阻塞, 线程中断状态将被设置, 并立即从selection操作中返回(可能返回非零值), 就像调用改了selector的wakeup方法.<br>如果没有上述情况发生, 那么线程的中断状态会被设置.<br>中断一个非存活的线程不会有任何影响.  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>blockerLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Interruptible</span> b <span class="token operator">=</span> blocker<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 仅设置中断的状态</span><span class="token function">interrupt0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">interrupt0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h5><p><strong>测试当前线程是否中断, 调用一次设置中断状态为true, 连续调用两次以上会使线程中断状态转为false.调用了本地方法<code>isInterrupted(boolean ClearInterrupted)</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="isInterrupted"><a href="#isInterrupted" class="headerlink" title="isInterrupted()"></a>isInterrupted()</h5><p>测试当前线程是否中断. 该方法不会影响线程的状态.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>基于ClearInterrupted清空线程中断状态:<br>false不清空; true清空, 即将中断状态设置为false</p><h5 id="isInterrupted-boolean-ClearInterrupted"><a href="#isInterrupted-boolean-ClearInterrupted" class="headerlink" title="isInterrupted(boolean ClearInterrupted)"></a>isInterrupted(boolean ClearInterrupted)</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> <span class="token class-name">ClearInterrupted</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="isAlive-判断线程是否存活"><a href="#isAlive-判断线程是否存活" class="headerlink" title="isAlive(): 判断线程是否存活"></a>isAlive(): 判断线程是否存活</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="setName-String-name-设置线程名称"><a href="#setName-String-name-设置线程名称" class="headerlink" title="setName(String name): 设置线程名称"></a>setName(String name): 设置线程名称</h4><p>及时调用了线程的start方法后, 也可以设置线程名称. 线程名称不能为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">setNativeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="activeCount-获取当前线程所属线程组活动线程数量"><a href="#activeCount-获取当前线程所属线程组活动线程数量" class="headerlink" title="activeCount(): 获取当前线程所属线程组活动线程数量"></a>activeCount(): 获取当前线程所属线程组活动线程数量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="enumerate-Thread-tarray-获取当前线程所有线程"><a href="#enumerate-Thread-tarray-获取当前线程所有线程" class="headerlink" title="enumerate(Thread tarray[]): 获取当前线程所有线程"></a>enumerate(Thread tarray[]): 获取当前线程所有线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> tarray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span>tarray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="join及其重载-等待线程终止"><a href="#join及其重载-等待线程终止" class="headerlink" title="join及其重载: 等待线程终止"></a>join及其重载: 等待线程终止</h4><p>join方实际上是调用join(0).<br>join(long millis, int nanos)与sleep(long millis, int nanos)相似</p><ul><li>如果nanos &lt; 0 或 nanos &gt; 999999抛出异常</li><li>如果nanos &gt;= 500000 或 nanos != 0 &amp;&amp; millis == 0, millis加一</li><li>最后调用join(millis).  </li></ul><p>所以下面具体看一下join(long millis)方法.<br><strong>join实际上是调用了Object的wait方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 实际上是调用了wait方法</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="isDaemon-测试线程是否是守护线程"><a href="#isDaemon-测试线程是否是守护线程" class="headerlink" title="isDaemon(): 测试线程是否是守护线程"></a>isDaemon(): 测试线程是否是守护线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> daemon<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java与线程</title>
      <link href="2021/03/03/java/concurrent/java_and_thread/"/>
      <url>2021/03/03/java/concurrent/java_and_thread/</url>
      
        <content type="html"><![CDATA[<h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><p>线程是比线程更轻量级的调度执行单位, 线程的引入可以把进程的资源分配和执行调度分开, 各个线程可以共享进程资源(内存地址, 文件I/O等), 又可以独立调度. Java里进行处理器资源调度的基本单位是线程.</p><p>通用的线程主要有三种方式:</p><ul><li>内核线程(Kernel-Level Thread, KLT), 1: 1实现</li><li>用户线程(User Thread), 1: N实现</li><li>用户线程加轻量级进程混合实现, N:M实现</li></ul><h3 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h3><p>内核线程实现也称1:1实现. 内核线程直接由操作系统内核支持的线程, 这种线程有内核来完成线程切换, 内核通过操作调度器对线程进行调度, 并负责将线程任务映射到各个处理器上.</p><p>程序一般不会直接使用内核线程, 而是使用内核线程的一种高级接口-轻量级进程(Light Weight Process, LWP), 轻量级进程</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用注解</title>
      <link href="2021/02/28/spring/ioc/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>2021/02/28/spring/ioc/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="组件添加相关注解及接口"><a href="#组件添加相关注解及接口" class="headerlink" title="组件添加相关注解及接口"></a><strong>组件添加相关注解及接口</strong></h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a><strong>@Configuration</strong></h3><blockquote><p>表示当前类是一个配置文件类</p></blockquote><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a><strong>@ComponentScan</strong></h3><blockquote><p>配置包扫描(扫描@Configuration及继承自@Configuration注解的注解).  </p></blockquote><ul><li><p><strong>basePackages属性使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 表示扫描com.nichijou包下的所有组件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.nichijou"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScan</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>basePackageClasses: 扫描的类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 表示仅添加AA和BB类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token punctuation">&#123;</span>AA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> BB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScan</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>includeFilters: 包含匹配规则</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 表示使用注解匹配, 所有标注@Service注解的都进行注册</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentScanAnnotation</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>excludeFilters: 排除匹配规则</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 表示使用注解匹配, 所有标注@Controller注解的都不进行注册</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentScanAnnotation</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ComponentScan注解定义:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ComponentScan</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 全限定包名, 将会扫描包下的所有组件</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 全限定类名, 只扫描指定的类</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 组件添加到容器中的名称生成器</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token punctuation">></span></span> <span class="token function">nameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BeanNameGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment">// 扫描添加的组件是否使用代理</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token punctuation">></span></span> <span class="token function">scopeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AnnotationScopeMetadataResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">ScopedProxyMode</span> <span class="token function">scopedProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token class-name">String</span> <span class="token function">resourcePattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ClassPathScanningCandidateComponentProvider</span><span class="token punctuation">.</span>DEFAULT_RESOURCE_PATTERN<span class="token punctuation">;</span>    <span class="token comment">// 是否使用默认过滤</span><span class="token keyword">boolean</span> <span class="token function">useDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 包含过滤规则, 根据该规则查找需要注入的组件</span><span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">includeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 排除过滤规则, 根据该规则查找需要排除的组件</span><span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 扫描添加的组件是否懒加载</span><span class="token keyword">boolean</span> <span class="token function">lazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认是以Annotation规则排除</span><span class="token class-name">FilterType</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"classes"</span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a><strong>@Bean</strong></h3><blockquote><p>作用于方法上, 表示方法产生一个Spring管理的组件.</p></blockquote><p>常用属性:</p><ol><li><p><strong>指定bean名称</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认使用方法名称作为组件名称, 即car</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过name或value指定bean名称 </span>    <span class="token comment">// @Bean(name = "myCar")</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"myCar"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>指定bean初始化和销毁方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 指定Car()中init和destroy方法作为初始化和销毁方法</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod<span class="token operator">=</span><span class="token string">"init"</span><span class="token punctuation">,</span> <span class="token function">destoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"destory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>@Bean源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 指定bean的名称, 可以有多个</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 废弃, 是否可以通过名称和类型查找自动注入</span>    <span class="token annotation punctuation">@Deprecated</span><span class="token class-name">Autowire</span> <span class="token function">autowire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Autowire</span><span class="token punctuation">.</span>NO<span class="token punctuation">;</span>    <span class="token comment">// TODO</span><span class="token keyword">boolean</span> <span class="token function">autowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 指定bean的初始化方法</span><span class="token class-name">String</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 指定bean的销毁方法</span><span class="token class-name">String</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">.</span>INFER_METHOD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><strong>@Component</strong></h3><blockquote><p>表示当前类是Spring的一个组件</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a><strong>@Service</strong></h3><blockquote><p>表示当前类是Service层</p></blockquote><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a><strong>@Controller</strong></h3><blockquote><p>表示当前类是Controller层</p></blockquote><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a><strong>@Repository</strong></h3><blockquote><p>表示当前类是Dao层</p></blockquote><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a><strong>@Conditional</strong></h3><blockquote><p>作用于类型和方法上, 表示仅在满足条件的情况下才注册组件. 在spring boot底层中大量使用.使用时需要实现Condition接口.</p></blockquote><ul><li><strong>Conditional注解源码</strong>:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Conditional</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Condition</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>Condition接口的定义:</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回true表示当前组件可以被注册到容器中, false反之.</span><span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>例子:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 由于无Controller注解将不会注册到容器中</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">MyCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 表示有Controller注解才会将组件注册到容器中</span>        <span class="token keyword">return</span> metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span><span class="token string">"Controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><blockquote><p>懒加载, 使用范围: @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})</p></blockquote><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><blockquote><p>bean的作用域</p></blockquote><ul><li>可选作用域<ul><li>singleton: 单例, 默认模式</li><li>prototype: 原型, 即多例</li><li>request: web容器中才有, 每个请求新建一个组件</li><li>session: web容器才有, 每个请求新建一个组件</li></ul></li><li><strong>源码</strong><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"scopeName"</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 作用域名称</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">scopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">// 作用域代理模式</span><span class="token class-name">ScopedProxyMode</span> <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><blockquote><p>快速将组件注册到容器中. 假设引用了第三发jar包, 我们无法修改jar包中的类, 可以使用@Bean注解手动注册组件, 也可以使用@Import快速注册.<br><strong>只可以用于类型上.</strong></p></blockquote><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式:"></a>使用方式:</h4><h5 id="直接导入类"><a href="#直接导入类" class="headerlink" title="直接导入类:"></a>直接导入类:</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 默认调用的是无参的构造参数进行注册, 默认组件名称为全限定类名.</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ThirdClass2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ThirdClass1</span> <span class="token function">getThird1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThirdClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入其他配置类"><a href="#导入其他配置类" class="headerlink" title="导入其他配置类"></a>导入其他配置类</h5><p>导入其他配置类, 也可以使用@Import注解导入其他配置类, 会将其他配置类中的组件注册到容器中.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">OtherConf</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherConf</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入ImportSelector实现类"><a href="#导入ImportSelector实现类" class="headerlink" title="导入ImportSelector实现类"></a>导入ImportSelector实现类</h5><p>实现ImportSelector接口, 返回需要导入类的全限定类名.<br>ImportSelector接口定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回需要注册到容器的组件的全限定类名</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getExclusionFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ImportSelector接口使用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 表示注入Car和Fish</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"com.t.Car"</span><span class="token punctuation">,</span> <span class="token string">"com.t.Fish"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入ImportBeanDefinitionRegistrar实现类"><a href="#导入ImportBeanDefinitionRegistrar实现类" class="headerlink" title="导入ImportBeanDefinitionRegistrar实现类"></a>导入ImportBeanDefinitionRegistrar实现类</h5><p>导入该接口的实现类, 将会调用接口的default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)方法进行注册组件.<br>ImportBeanDefinitionRegistrar接口定义:</p><pre class="line-numbers language-none"><code class="language-none">public interface ImportBeanDefinitionRegistrar &#123;default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,BeanNameGenerator importBeanNameGenerator) &#123;registerBeanDefinitions(importingClassMetadata, registry);&#125;    &#x2F;**      * importingClassMetadata: 当前类的注解信息,      * registry: bean定义注册类     * 所有需要添加到容器中的组件使用registry进行手动注册.     *&#x2F;default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ImportBeanDefinitionRegistrar使用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyImporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImporter</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> car <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果含有car组件, 手动注入carFactory</span>            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">CarFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"carFactory"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><blockquote><p>如果存在多个组件, 表示注解所注释的组件为默认自动注入的组件.<br>用于类型和方法上.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认以类型注入的时候, 选择该组件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoWiredTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此时car是Audi</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>使用FactoryBean进行组件注册. 容器调用getObject()方法获取工厂产生的bean. 如果想要获取工厂bean本身, 则需要在beanName前添加<code>&amp;</code>符号(即<code>&amp;beanName</code>).</p><h4 id="FactoryBean定义"><a href="#FactoryBean定义" class="headerlink" title="FactoryBean定义"></a>FactoryBean定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> OBJECT_TYPE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"factoryBeanObjectType"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FactoryBean使用"><a href="#FactoryBean使用" class="headerlink" title="FactoryBean使用"></a>FactoryBean使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 容器将会同时注册carFactoryBean(调用getObject()产生)和工厂&amp;carFactoryBean</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CarFactoryBean</span> <span class="token function">carFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CarFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span>HH<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">HH</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InitializingBean和DisposableBean"><a href="#InitializingBean和DisposableBean" class="headerlink" title="InitializingBean和DisposableBean"></a>InitializingBean和DisposableBean</h3><blockquote><p>除了使用@Bean的时候指定initMethod和destroyMethod还可以实现这两个接口完成同样功能.</p></blockquote><p>InitializingBean和DisposableBean分别用于添加bean的初始化和销毁方法</p><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化一个bean之后调用该方法</span><span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 销毁一个bean之前调用该方法</span><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口使用"><a href="#接口使用" class="headerlink" title="接口使用"></a>接口使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PostConstruct和-PreDestroy"><a href="#PostConstruct和-PreDestroy" class="headerlink" title="@PostConstruct和@PreDestroy"></a>@PostConstruct和@PreDestroy</h3><blockquote><p>第三种设置bean的初始化和销毁回调方法是使用jsr250定义的这两个注解.</p></blockquote><p>使用方式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><blockquote><p>bean后置处理器, Spring提供该接口用于bean创建前后的一些处理. Spring中xxxAware接口, 就是借助该接口实现相关组件的注入.</p></blockquote><h4 id="BeanPostProcessor定义"><a href="#BeanPostProcessor定义" class="headerlink" title="BeanPostProcessor定义:"></a>BeanPostProcessor定义:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 在任何初始化操作调用之前调用(例如InitializingBean的afterPropertiesSet或自定义的init-method或@PostConstruct注解之前调用).     * bean的属性在调用该方法之前已经完成填充.     */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 在给定bean初始化之后调用(例如在InitializingBean的afterPropertiesSet或自定义的init-method或@PostConstruct注解之后调用)</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义使用"><a href="#自定义使用" class="headerlink" title="自定义使用"></a>自定义使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before: beanName: "</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">", bean: "</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after: beanName: "</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">", bean: "</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring底层使用举例"><a href="#Spring底层使用举例" class="headerlink" title="Spring底层使用举例"></a>Spring底层使用举例</h4><blockquote><p>在业务类中实现Spring中的ApplicationAware, EnvironmentAware等接口, 都是通过ApplicationContextAwareProcessor调用相应的接口方法将组件注入到业务实现类中.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ApplicationContextAwareProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringValueResolver</span> embeddedValueResolver<span class="token punctuation">;</span><span class="token comment">/** * Create a new ApplicationContextAwareProcessor for the given context. */</span><span class="token keyword">public</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedValueResolver</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">EmbeddedValueResolverAware</span> <span class="token operator">||</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token operator">||</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">MessageSourceAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationContextAware</span> <span class="token operator">||</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">AccessControlContext</span> acc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>acc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 调用bean中实现相应Aware接口的方法将对应组件注入到bean中.</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">MessageSourceAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件赋值"><a href="#组件赋值" class="headerlink" title="组件赋值"></a>组件赋值</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><blockquote><p>@Value注入属性到字段上. 元注解, 可以用于字段, 方法, 参数, 其他注解上.<br>该注解是在BeanPostProcessor(具体使用AutowiredAnnotationBeanPostProcessor实现)中进行处理, 所以无法在BeanPostProcessor中使用该注解.</p></blockquote><p>使用方式:</p><ul><li>基本的数值</li><li>SpEL, #{}</li><li>${}, 读取配置文件中的属性<h4 id="基本数值"><a href="#基本数值" class="headerlink" title="基本数值"></a>基本数值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// carName将被注入Audi</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"Audi"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> carName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SpEL表达式"><a href="#SpEL表达式" class="headerlink" title="SpEL表达式"></a>SpEL表达式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// price = 2</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;1+1&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="读取配置文件信息"><a href="#读取配置文件信息" class="headerlink" title="读取配置文件信息"></a>读取配置文件信息</h4><p>如果读取的属性不存在时, 会将表达式当做字符串注入属性中. 如果启用了strict模式将会抛出异常.Spring 默认开启.<br>也可以在表达式中指定默认值: <code>$&#123;property: defaultValue&#125;</code>, 此时如果property不存在, 则将defaultValue注入属性中.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// color = blue</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;car.color&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token comment">// height = 50</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;car.height: 50&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// xxx.properties</span>car<span class="token punctuation">.</span>color <span class="token operator">=</span> blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><blockquote><p>元注解, 可以用于构造器, 方法, 参数, 字段, 其他注解. 由Spring的<code>BeanPostProcessor</code>实现, 所以无法在<code>BeanPostProcessor</code>中使用.<br>用于自动注入容器中的组件到相应的属性上. 其中required属性表示是否是否必须注入, 默认为true.<br>@Autowired默认以类型进行匹配查找Bean. 若同一类型存在多个bean, 可以使用@Primary注解指定默认的注入bean. 也可以使用@Qualifier注解缩小限定范围.<br>尽管@Autowired可以使用在参数上, 但是Spring仅在Unit Jupiter这个spring的测试框架中支持.<br>Although @Autowired can technically be declared on individual method or constructor parameters since Spring Framework 5.0, most parts of the framework ignore such declarations. The only part of the core Spring Framework that actively supports autowired parameters is the JUnit Jupiter support in the spring-test module (see the TestContext framework  reference documentation for details).</p></blockquote><h4 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CarType</span> carType<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CarType</span> carType<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCarType</span><span class="token punctuation">(</span><span class="token class-name">CarType</span> carType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>carType<span class="token operator">=</span> carType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><blockquote><p>如果类中只有一个构造器(即使该构造方法是私有的), 如果不使用@Autowired注解, Spring也会自动使用该构造器进行注入.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CarType</span> carType<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">CarType</span><span class="token punctuation">(</span><span class="token class-name">CarType</span> carType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>carType<span class="token operator">=</span> carType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><blockquote><p>元注解, 可用于字段, 方法, 参数, 类型, 和其他注解.<br>用于缩小自动注入时的匹配范围, 例如有两个bean的类型都是Car, 则可以通过使用@Qualifier注解缩小范围</p></blockquote><h4 id="Qualifier使用"><a href="#Qualifier使用" class="headerlink" title="@Qualifier使用"></a>@Qualifier使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果未指定, 则Qualifier的value值默认为bean的名称.</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"benz"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Benz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若不使用Qualifier注解, 会抛出异常, 无法自动注入</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><blockquote><p>使用PropertySource可以加载外部配置文件.</p></blockquote><p>引入配置文件后可以使用<code>$&#123;&#125;</code>引用配置文件中的属性.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"classpath:/conf-dev.properties"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/conf-dev.properties"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PropertySources"><a href="#PropertySources" class="headerlink" title="@PropertySources"></a>@PropertySources</h3><blockquote><p>加载外部配置文件, 接收多个PropertySource注解.</p></blockquote><h4 id="PropertySources接口定义"><a href="#PropertySources接口定义" class="headerlink" title="@PropertySources接口定义"></a>@PropertySources接口定义</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PropertySources</span> <span class="token punctuation">&#123;</span><span class="token class-name">PropertySource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PropertySources使用"><a href="#PropertySources使用" class="headerlink" title="@PropertySources使用"></a>@PropertySources使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PropertySources</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:/conf-dev.properties"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><blockquote><p>表示指定配置激活时, 注解的组件才可以注册到容器中. 通常用于@Component及其复合注解和@Bean注解的方法上.</p></blockquote><h4 id="Profile使用"><a href="#Profile使用" class="headerlink" title="@Profile使用"></a>@Profile使用</h4><p>@Profile默认使用default环境</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 只有在激活了dev环境时才会注册car组件, Conf类会被注册到容器中</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只有dev和test同时激活时, 才会注入audi组件</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="2021/02/25/java/concurrent/jmm/"/>
      <url>2021/02/25/java/concurrent/jmm/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内存模型抽象"><a href="#Java内存模型抽象" class="headerlink" title="Java内存模型抽象"></a>Java内存模型抽象</h2><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="java运行时数据区" loading="lazy"><em>java运行时数据区</em></p><p>对于每个线程来说, 栈是私有的, 堆是共有的. 栈中的变量不会共享, 不会受到内存模型的影响. 堆中的变量是共享的, 称之为共享变量.</p><h3 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h3><p>尽管堆中的变量是共享的, 仍然会有内存不可见的问题. 现代计算机通常会在高速缓存区中缓存共享变量.</p><blockquote><p>线程间共享变量存在于主存中, 每个线程都会有一个私有的工作内存, 存储了共享变量的副本. 工作内存是Java内存的一个抽象模式, 实际并不存在. 其涵盖了缓存, 写缓冲区, 寄存器等.</p></blockquote><p>Java线程间通信由Java内存模型控制(JMM). JMM抽象示意图如下:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="jmm抽象示意图" loading="lazy"></p><p>从图中可以看出:</p><ol><li>所有的共享变量都存在于主内存中.</li><li>每个线程都维护一个共享变量的副本.</li><li>如果A, B线程需要通信, 则必须进行以下两个步骤:<ol><li>A将共享变量更新到主存.</li><li>B从主存读取A更新的共享变量到工作内存.</li></ol></li></ol><p>JMM规定: 线程对共享变量的所有操作必须现在工作内存进行, 不能直接在主存中操作. 所以B线程首先在工作内存中查找共享变量, 发现该变量更新了, 再从主存拷贝该变量的值到工作内存中.</p><p>线程如何知道共享变量更新?</p><blockquote><p>JMM通过控制主存与每个工作内存之间的交互, 来提供内存的可见性. </p></blockquote><p>Java中的volatile关键字保证共享变量的可见性并禁止指令重排序. synchronized关键字保证了可见性及原子性. JMM底层使用内存屏障来实现内存的可见性及禁止重排序.</p><p>Java内存模型与硬件关系图:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%85%B3%E7%B3%BB.jpg" alt="java内存模型与硬件关系" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B2.png" alt="java内存模型与硬件关系" loading="lazy"></p><h3 id="内存交互操作"><a href="#内存交互操作" class="headerlink" title="内存交互操作"></a>内存交互操作</h3><p>Java内存模型定义了8个操作完成主内存与工作内存的交互操作, 且保证每种操作都是原子的(double, long类型变量的load, store, read, write操作在某些平台上允许例外):</p><ul><li>lock: 作用于主内存的变量, 把变量标识为一条线程独占的状态.</li><li>unlock: 作用于主内存变量, 将处于锁定状态的变量释放出来, 释放后的变量可以被其他线程锁定.</li><li>read: 作用于主内存变量, 把一个变量值从主内存传输到线程的工作内存中, 以便load动作的使用.</li><li>load: 作用于工作内存变量, 将read操作从主存中得到的变量放入工作内存中.</li><li>use: 作用于工作内存变量, 将工作内存中一个变量的值传递给执行引擎, 每当虚拟机遇到一个需要使用变量的值的字节码指令时执行这个操作.</li><li>assign: 作用于工作内存变量, 将从执行引擎接收的值赋值给工作内存的变量, 每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.</li><li>store: 作用于工作内存变量, 将工作内存中一个变量的值传递到主内存中, 以便随后的write操作使用.</li><li>write: 作用于主内存变量, 将store操作从工作内存中得到的变量值放入主内存的变量中.</li></ul><p>Java内存模式同时规定了在执行以上8中操作的同时必须同时满足一下规则:</p><ul><li>不允许read, load, store, write操作之一单独出现, 即不允许变量从主内存中读取了但工作内存不接受, 或工作内存发起回写但是主内存不接受的情况.</li><li>不允许一个线程丢弃其最近的assign操作, 即变量在工作内存中改变了之后, 必须将该改变同步回主内存.</li><li>不允许一个线程无原因(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存.</li><li>一个新的变量只能在主内存中诞生, 不允许在工作内存中直接使用一个未被初始化(load或assign)的变量. 即对一个变量实施use, store操作之前, 必须执行assgin和load操作.</li><li>一个变量在同一时刻只允许一条线程对其进行lock, 但lock可以被同一线程重复执行多次, 多次执行lock后, 只有执行相同次数的unlock, 变量才会解锁.</li><li>如果对一个变量执行lock, 将会清空工作内存中此变量的值, 在执行引擎使用这个变量前, 需要重新执行load或assign操作初始化变量的值.</li><li>如果一个变量没有被lock锁定, 那么不允许对其执行unlock, 也不允许区unlock被其他线程锁定的变量.</li><li>对一个变量执行unlock之前, 必须把此变量同步回主内存中(执行store, write操作).</li></ul><h3 id="volatile变量"><a href="#volatile变量" class="headerlink" title="volatile变量"></a>volatile变量</h3><h4 id="volatile变量两个特性"><a href="#volatile变量两个特性" class="headerlink" title="volatile变量两个特性:"></a>volatile变量两个特性:</h4><ul><li><p><strong>保证变量对所有线程可见性, 一个线程修改了变量的值, 其他线程可以立即得知.但是并不保证变量操作的原子性.</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 执行a++ 10w次</span>      <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-></span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行a++ 10w次</span>      <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-></span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通常a的值 &lt; 200000</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码每次执行的结果都会小于200000, 说明volatile并不会保证变量操作的原子性.</p></li><li><p><strong>禁止指令重排序优化</strong><br>cpu在执行一系列指令的时候, 在不影响单线程的执行结果下, 可能会将指令重新排序. Java的运行时编译器(JIT)也会将也会将执行进行重排序.Java中有个as-if-serial术语表示不管如何重排序, 必须保证单线程下重排序的结果与本身应有的结果是一致的.<br>例如以下代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上代码在执行时大致有一下几个步骤:</p><pre class="line-numbers language-none"><code class="language-none">1. a赋值02. b赋值13. 取a值4. 取b的值5. 将a, b值相加存入c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>以上动作有很多种重排序的方式(例如2, 1, 3, 4, 5), 但是必须保证在动作5执行之前, a, b的值是正确的值.<br>接下来看一个指令重排序的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            d <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"产生重排序: "</span> <span class="token operator">+</span> count <span class="token operator">+</span>  <span class="token string">", b: "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">", d: "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码如果没有指令重排序, 运行结果可能为b, d的结果可能是以下几种: (1, 0), (0, 1), (1, 1). 然而在实际运行情况下会打印出b, d结果为(0, 0)的情况(测试用了354062次), 说明了存在指令重排序. 可能是线程t1中重排序了<code>b = c;a = 1</code>, 或是t2重排序<code>d = a; c = 1;</code>, 又或是二者都进行了重排序.</p><p><strong>由于volatile变量只能保证可见性, 在不符合以下两条规则的运算场景中, 仍然需要加锁来保证原子性:</strong></p><ul><li>运算结果并不依赖变量当前的值, 或者能保证只有单一的线程修改变量的值.</li><li>变量不需要与其他的状态变量共同参与不变约束.</li></ul><h4 id="双重检查锁-Double-Check-Lock-DCL"><a href="#双重检查锁-Double-Check-Lock-DCL" class="headerlink" title="双重检查锁(Double Check Lock, DCL)"></a>双重检查锁(Double Check Lock, DCL)</h4><p>常见的一种错误的DCL单例模式(多线程下):</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双重检查锁的第二个判断是否为空<code>instance == null</code>是因为多线程情况下, 如果A线程判断instance为空, 并获得了锁, 但A此时尚未进行instance的初始化, 此时调度B线程判断instance也为空, 紧接着线程调度A运行, 完成了instance的初始化, 接着调度B线程, 获得锁, 此时A已经完成了instance的初始化, 如果B线程不再进行一次<code>instance == null</code>的判断, 会重新初始化这个instance变量, 破坏了单例.</p><p>以上代码在多线程情况下可能会导致错误. 线程可能获取值为<code>null</code>的<code>instance</code>, 这是由于<code>instance = new Singleton</code>语句可能会发生重排序.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以分解为以下三个步骤</span><span class="token number">1.</span> memory <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配内存</span><span class="token number">2.</span> <span class="token function">ctorInstance</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化对象</span><span class="token number">3.</span> s <span class="token operator">=</span> memory <span class="token comment">// 将s指向刚分配的地址</span><span class="token comment">// 上述三个步骤可能会被重排序</span><span class="token number">1.</span> memory <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配内存</span><span class="token number">3.</span> s <span class="token operator">=</span> memory <span class="token number">2.</span> <span class="token function">ctorInstance</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果发生了上述的重排序, 那么如果线程A执行到<code>s=memory</code>语句, 此时线程B执行, B判断<code>instance != null</code>, 而此时的<code>instance</code>还并未完成初始化, B就会拿到一个尚未初始化完成的<code>instance</code>.<br>解决以上问题只需要将<code>instance</code>变量声明为volatile类型, 禁止指令重排序优化:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="volatile-和-monitor"><a href="#volatile-和-monitor" class="headerlink" title="volatile 和 monitor"></a>volatile 和 monitor</h3><p>JMM对于volatile和monitor的指令重排序规则:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/jmm_volatile_monitor_rule.png" alt="jmm_volatile_monitor_rule" loading="lazy"><em>JMM对于volatile和monitor的指令重排序规则</em></p><h3 id="内存屏障-memory"><a href="#内存屏障-memory" class="headerlink" title="内存屏障(memory)"></a>内存屏障(memory)</h3><p>内存屏障有以下几种:</p><h4 id="LoadLoad屏障"><a href="#LoadLoad屏障" class="headerlink" title="LoadLoad屏障"></a>LoadLoad屏障</h4><p>语句: Load1; LoadLoad; Load2;<br>在Load2及后续读取操作要读取的数据被访问前, 保证Load1要读取的数据被读取完毕.</p><h4 id="StoreStore屏障"><a href="#StoreStore屏障" class="headerlink" title="StoreStore屏障"></a>StoreStore屏障</h4><p>语句: Store1; StoreStore; Store2;<br>在Store2及后续写入操作执行前, 保证Store1的写入操作对其他处理器可见.</p><h4 id="LoadStore屏障"><a href="#LoadStore屏障" class="headerlink" title="LoadStore屏障"></a>LoadStore屏障</h4><p>语句: Load1; LoadStore; Store2;<br>在Store2及后续写入操作执行前, 保证Load1要读取的数据被读取完毕.</p><h4 id="StoreLoad屏障"><a href="#StoreLoad屏障" class="headerlink" title="StoreLoad屏障"></a>StoreLoad屏障</h4><p>语句: Store1; StoreLoad; Load2;<br>在Load2及后续读取操作执行前, 保证Store1的写入对所有的处理器可见. 其开销是四种屏障中最大的. 在大多数处理器实现中, 这个屏障是万能屏障, 兼具其他三种内存屏障的功能.</p><p>Java编译器内存屏障使用方式:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/java/concurrent/memory_barrier_rule_new.png" alt="jmm_volatile_monitor_rule" loading="lazy"><em>内存屏障规则</em></p><h3 id="Happens-Before-先行发生原则"><a href="#Happens-Before-先行发生原则" class="headerlink" title="Happens-Before(先行发生原则)"></a>Happens-Before(先行发生原则)</h3><blockquote><p>Java happens-before是Java内存模式中定义的两项操作间的偏序关系. 如A操作happens-before与B操作, 则在B操作发生之前, A操作的产生的影响能被B操作观察到. 例如以下代码:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// A操作</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// B操作</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在B操作完成之前, A操作一定先完成.</p><p><strong>NB:</strong><br><strong>两个操作间存在happens-before关系, 并不意味着Java具体实现按照指定的关系顺序执行, 如果重排序的结果与按happens-before关系来执行的结果一致, 那么JMM也允许这样的重排序.</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>以上代码可能先执行i = 1, 也可能先执行j = 2, 最终结果不影响k = i + j的执行.</strong></p><h4 id="JMM天然支持的Happens-Before"><a href="#JMM天然支持的Happens-Before" class="headerlink" title="JMM天然支持的Happens-Before"></a>JMM天然支持的Happens-Before</h4><blockquote><p>Java无需任何同步手段就可以保证的先行发生规则: </p></blockquote><ol><li>程序次序规则(Program Order Rule): 在一个线程内, 按照控制流顺序, 书写在前面的操作先行发生于书写在后面的操作.</li><li>管程锁定规则(Monitor Lock Rule): 一个unlock操作先行发生于后面对同一个锁的lock操作. 这里必须是”同一个锁”, “后面”指的是时间上的先后.</li><li>volatile变量规则(Volatile Variable Rule): 对一个volatile变量的写操作先行发生于后面对这个变量的读操作. “后面”指的是时间上的先后.</li><li>线程启动规则(Thread Start Rule): Thread对象的start()方法先行发生于此线程的每个动作.</li><li>线程终止规则(Thread Termination Rule): 线程中所有操作都先行发生关于对此线程的终止检测. 通过Thread.join()方法是否结束, Thread.isAlive()的返回值等方法检测线程是否已经终止执行. 如果A线程调用了线程B的join()方法并发返回成功, 那么B线程的任意操作都发生于A线程调用B.join()返回成功之前.</li><li>线程中断规则(Thread Interruption Rule): 对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生. 通过Thread.interrupted()方法检测是否有中断发生.</li><li>对象终结规则(Finalizer Rule): 一个对象的初始化完成(构造函数执行结构)先行发生于他的finalize()方法的开始.</li><li>传递性(Transitivity): 如果操作A先行发生于操作B, 操作B先行发生于操作C, 那么就可以得出操作A先行发生于操作C.</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程通信</title>
      <link href="2021/02/25/java/concurrent/thread_communication/"/>
      <url>2021/02/25/java/concurrent/thread_communication/</url>
      
        <content type="html"><![CDATA[<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>线程有自己私有的上下文, 互不干扰. 但多个线程需要协作时, 就需要使用Java的线程通信方式.</p><h3 id="锁与同步"><a href="#锁与同步" class="headerlink" title="锁与同步"></a>锁与同步</h3><p>Java中, 所有锁都是基于对象的, 所以又称对象锁.(内置锁, 监视器锁) Java的内置锁是一种互斥锁, 一个锁同一时间只能被一个线程持有. 其他线程想要得到该锁, 必须要等持有该锁的线程释放才行.</p><p>Java内置锁是可重入锁, 如果一个线程试图获得一个已被它自己持有的锁, 那么这个请求就会成功.</p><p>使用锁可以进行线程间的同步.下面来看一个用锁进行同步的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"Thread a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"Thread b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// lock保证了a与b是同步执行的, 即若a先获得锁, 待a执行完毕, b才能进入同步方法执行, 反之亦然.</span>    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h3><p>基于锁实现同步, 线程需要不断获取锁, 如果失败了, 还有再次获取, 会消耗服务器资源.<br>Java的等待/通知机制基于Object类的wait()方法和notify()方法.</p><blockquote><p>wait()方法使进程进入waiting状态, 等待其他线程(拥有同一个锁)唤醒.<br>notify方法随机唤醒一个进程(唤醒了也不一定立即在cpu上执行), notifyAll唤醒所有等待同一个锁的进程.</p></blockquote><p>NB:</p><blockquote><p>有时候线程调用了Object.wait(), 尽管没有其他线程调用响应的notify方法, 该线程也会自动唤醒.<br>As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>condition does not hold<span class="token punctuation">;</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// Perform action appropriate to condition</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来看一下利用等待/通知机制的例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 保证a线程wait后不会自行启动</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> condition <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread a is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                       lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread a is done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread b is Running"</span> <span class="token operator">+</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例子中若a线程先获得锁, 将依次输出以下: </p><pre class="line-numbers language-none"><code class="language-none">Thread a is waitingThread b is runningThread a is done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若b线程先获得锁, 依次输出以下:</p><pre class="line-numbers language-none"><code class="language-none">Thread b is runningThread a is done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="信号量-TODO"><a href="#信号量-TODO" class="headerlink" title="信号量 TODO"></a>信号量 TODO</h3><p>信号量是一个有整数值的对象. 通常有增加和减少两个操作, 且是原子操作.</p><p>JDK提供了一个类似于信号量功能的类Semahore.</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道是基于管道流的通信方式. JDK提供了PipedWriter, PipedReader, PipedOutputStream, PipedInputeStream</p><h3 id="其他通信相关"><a href="#其他通信相关" class="headerlink" title="其他通信相关"></a>其他通信相关</h3><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><h4 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h4><h4 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h4><h4 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="2021/02/24/algorithm/15_three_sum/"/>
      <url>2021/02/24/algorithm/15_three_sum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-15"><a href="#题目-leetcode-15" class="headerlink" title="题目(leetcode-15)"></a>题目(<a href="https://leetcode.com/problems/3sum/">leetcode-15</a>)</h2><p>给定整数数组nums, 在数组中寻找a,b,c使得a+b+c=0. 返回全部的不重复的结果.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Example 1:Input: nums &#x3D; [-1,0,1,2,-1,-4]Output: [[-1,-1,2],[-1,0,1]]Input: nums &#x3D; [0]Output: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力循环需要$O(n^3)$时间复杂度, 首先排序便于过滤重复结果, 可以使用双指针进行数据筛选</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">```<span class="token comment">### java</span>```java<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    public List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> threeSum<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">//</span> 排序便于筛选出        Arrays<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> new LinkedList<span class="token operator">&lt;></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">//</span> 排序后起始的值<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span> 无结果<span class="token punctuation">,</span> 跳过            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">//</span> 去除重复结果<span class="token punctuation">,</span> i <span class="token operator">></span> <span class="token number">0</span>保证了 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>这种情况不会跳过            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token builtin">int</span> s <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token operator">//</span> 添加结果<span class="token punctuation">,</span> 同时left <span class="token operator">-</span> <span class="token number">1</span>与right <span class="token operator">+</span> <span class="token number">1</span>                    res<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span>asList<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">//</span> 去除重复结果                    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    left<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    right<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="2021/02/24/algorithm/1_two_sum/"/>
      <url>2021/02/24/algorithm/1_two_sum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-1"><a href="#题目-leetcode-1" class="headerlink" title="题目(leetcode-1)"></a>题目(<a href="https://leetcode.com/problems/two-sum/">leetcode-1</a>)</h2><p>给定整数数组nums, 目标值target, 返回数组中两数和为target的下标.<br>假设每个输入有且仅有一个输出, 同一元素不可重复使用.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Example 1:Input: nums &#x3D; [2,7,11,15], target &#x3D; 9Output: [0,1]Output: nums[0] + nums[1] &#x3D;&#x3D; 9, return [0, 1].Input: nums &#x3D; [3,2,4], target &#x3D; 6Output: [1,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>暴力循环时间复杂度为O(n), 使用map以空间换时间.  </p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i            <span class="token keyword">if</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> d<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐数</title>
      <link href="2021/02/24/algorithm/202_happy_num/"/>
      <url>2021/02/24/algorithm/202_happy_num/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-202"><a href="#题目-leetcode-202" class="headerlink" title="题目(leetcode-202)"></a>题目(<a href="https://leetcode.com/problems/happy-number/">leetcode-202</a>)</h2><p>给定一个数n判断是否是快乐数:<br>快乐数定义:  </p><ul><li>以任意正整数开始, 以数字的每位的平方的和替换原来的数字</li><li>重复以上步骤直到数字变为1, 如果数字不会变成1将会无线循环</li><li>如果过程中产生1, 则该数字是快乐数.</li></ul><p>约束:<br>$ 1 &lt;= n &lt; 2^{31} - 1 $</p><p>例:</p><pre class="line-numbers language-none"><code class="language-none">Input: n &#x3D; 19Output: trueExplanation:12 + 92 &#x3D; 8282 + 22 &#x3D; 6862 + 82 &#x3D; 10012 + 02 + 02 &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一个重要的信息是, 如果数字不是快乐数, 则会进入无线循环.<br>所以可以使用set保存的到的数字, 如果新产生的结果存在于set中, 表示该数不是快乐数.<br>使用判断列表是否有环的思想(Floyd’s cycle-finding algorithm), 使用快慢指针, 如果相遇且不为1表示不是快乐数.</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>使用set.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calcSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            s <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>            n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">10</span>        <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> false        s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> self<span class="token punctuation">.</span>calcSum<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token keyword">in</span> s<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>使用双指针</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token function">calcSum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token function">calcSum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> fast <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> <span class="token function">calcSum</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> <span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token function">calcSum</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程状态</title>
      <link href="2021/02/23/java/concurrent/thread_status/"/>
      <url>2021/02/23/java/concurrent/thread_status/</url>
      
        <content type="html"><![CDATA[<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><h3 id="操作系统中的线程状态"><a href="#操作系统中的线程状态" class="headerlink" title="操作系统中的线程状态"></a>操作系统中的线程状态</h3><blockquote><p>现代操作系统线程被认为是轻量级的进程, 所以操作系统中线程与进程状态相同.<br>操作系统中的线程主要有以下三个状态:</p></blockquote><ol><li>就绪态(ready): 线程已准备好, 但并未执行</li><li>运行态(running): 线程正在cpu上执行</li><li>阻塞态(blocked): 一个进程发生了某种操作, 直到发生其他事件才会准备运行. 典型的例子是发起磁盘I/O.</li></ol><h3 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>    NEW<span class="token punctuation">,</span>    RUNNABLE<span class="token punctuation">,</span>    BLOCKED<span class="token punctuation">,</span>    WAITING<span class="token punctuation">,</span>    TIMED_WAITING<span class="token punctuation">,</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h4><blockquote><p>线程已创建但是尚未启动的状态, 即尚未调用Thread中的start()方法.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"not yet start"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时状态为NEW</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h4><blockquote><p>可运行线程状态. 处于该状态的线程运行于JVM中, 但是可能并未在操作系统中运行. 所以Java的runnable状态线程对应操作系统中的就绪态和运行态.</p></blockquote><h4 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h4><blockquote><p>线程阻塞等待监视器锁的状态. 处于该状态的线程等待获取监视器锁进入同步块/方法, 或者在调用Object.wait方法后重入同步块/方法.</p></blockquote><h3 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h3><blockquote><p>一个线程在调用一下方法后会进入waiting状态:</p></blockquote><ul><li>没有timeout参数的Object.wait, 使当前线程处于等待状态, 除非有其他线程唤醒.</li><li>没有timeout参数的Thread.join, 等待线程执行完毕, 底层调用的是Object.wait.</li><li>LockSupport.part, 除非获得代用许可, 否则禁止当前线程进行调度.</li></ul><blockquote><p>处于waiting状态的线程等待其他线程执行一些特殊的操作. 如: 调用了Object.wait()方法的线程等待其他线程调用Object.notify()或Object.notifyAll()方法.调用Thread.join()等待指定线程执行完毕.</p></blockquote><h4 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED_WAITING"></a>TIMED_WAITING</h4><blockquote><p>调用一下方法将使线程进入timed waiting状态(传入的等待时间为正数):</p></blockquote><ul><li>Thread.sleep</li><li>Object.wait</li><li>Thread.join</li><li>LockSupport.parkNanos</li><li>LockSupport.parkUntil</li></ul><h4 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h4><blockquote><p>终止的线程的状态.线程已完成执行.</p></blockquote><h3 id="Java线程状态转换"><a href="#Java线程状态转换" class="headerlink" title="Java线程状态转换"></a>Java线程状态转换</h3><p><img src="http://concurrent.redspider.group/article/01/imgs/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="Java线程状态转换" loading="lazy"><em>Java线程状态转换</em></p><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><blockquote><p>目前Java中没有安全直接的方法停止线程, 只是提供了线程中断机制来处理需要中断线程的情况.<br>线程中断是一种协作机制. 通过中断操作不能直接终止一个线程, 而是通知需要被中断的线程自行处理.</p></blockquote><p>Thread类有关线程中断的方法:</p><ul><li>Thread.interrupt(): 中断线程, 设置线程的中断状态为true.</li><li>Thread.interrupted(): 静态方法, 设置连续调用两次会将线程的中断状态设置为true.</li><li>Thread.isInterrupted(): 判断线程是否中断, 不会改变状态.</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程组详解</title>
      <link href="2021/02/23/java/concurrent/thread_group/"/>
      <url>2021/02/23/java/concurrent/thread_group/</url>
      
        <content type="html"><![CDATA[<h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>Java中使用ThreadGroup表示线程组. 每个Thread都必须存在于ThreadGroup中. </p><h3 id="线程组使用"><a href="#线程组使用" class="headerlink" title="线程组使用"></a>线程组使用</h3><p>创建线程及线程组demo:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadGroupDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadGroup</span> threadGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"MyThreadGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置最大优先级</span>threadGroup<span class="token punctuation">.</span><span class="token function">setMaxPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadGroup<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认会将该线程添加到执行该线程的线程所属线程组中</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>ThreadGroup中的成员变量:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当前线程组的父线程组</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadGroup</span> parent<span class="token punctuation">;</span><span class="token comment">// 当前线程组名称</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 当前线程组的最大优先级</span><span class="token keyword">int</span> maxPriority<span class="token punctuation">;</span><span class="token comment">// 线程组是否销毁</span><span class="token keyword">boolean</span> destroyed<span class="token punctuation">;</span><span class="token comment">// 是否守是护线程组, 守护线程组: 在该线程组的最后一个线程停止执行或其最后一个子线程组销毁后, 该线程组自动销毁</span><span class="token keyword">boolean</span> daemon<span class="token punctuation">;</span><span class="token comment">// 是否允许vm悬停</span><span class="token keyword">boolean</span> vmAllowSuspension<span class="token punctuation">;</span><span class="token comment">// 记录尚未开始执行的线程数</span><span class="token keyword">int</span> nUnstartedThreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 线程组中线程总数</span><span class="token keyword">int</span> nthreads<span class="token punctuation">;</span><span class="token comment">// 记录所有线程</span><span class="token class-name">Thread</span> threads<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 子线程组数</span><span class="token keyword">int</span> ngroups<span class="token punctuation">;</span><span class="token comment">// 所有子线程组</span><span class="token class-name">ThreadGroup</span> groups<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>下面来看一下ThreadGroup的构造函数:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建一个不属于任何线程组的空线程组 * 该私有构造方法用于创建系统线程组 */</span><span class="token keyword">private</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// called from C code</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxPriority <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 创建一个线程组, 该线程组的父线程组是当前运行线程所属的线程组 */</span><span class="token keyword">public</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 创建一个线程组, 父线程组为指定线程组. */</span><span class="token keyword">public</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">checkParentAccess</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 可以发现, 构造方法最终调用了此构造方法 */</span><span class="token keyword">private</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token class-name">Void</span> unused<span class="token punctuation">,</span> <span class="token class-name">ThreadGroup</span> parent<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token comment">// 拷贝parent线程组参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxPriority <span class="token operator">=</span> parent<span class="token punctuation">.</span>maxPriority<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span>daemon<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vmAllowSuspension <span class="token operator">=</span> parent<span class="token punctuation">.</span>vmAllowSuspension<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token comment">// 当前线程组添加到parent的子线程组中</span>parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第三个构造参数中, 调用了一个checkParentAccess(ThreadGroup parent)函数, 用于检查当前线程是否有权限修改该线程组. 下面来看一下具体代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Void</span> <span class="token function">checkParentAccess</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>parent<span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果存在安全管理器, 则调用用安全管理器检查当前线程是否有权限修改该线程组.</span><span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>security<span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四个构造参数真正进行线程组的初始化, 拷贝了父线程组的信息, 并调用parent.add()方法将当前线程组添加到父线程组的子线程数组中. 下面来看一下parent.add()的具体实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 加锁</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果当前线程组已经销毁, 抛出异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>destroyed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果子线程数组为空, 初始化</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groups <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groups <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ngroups <span class="token operator">==</span> groups<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果子线程组数组已满, 扩容长度*2</span>groups <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>groups<span class="token punctuation">,</span> ngroups <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加线程组到线程组数组中</span>groups<span class="token punctuation">[</span>ngroups<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">;</span><span class="token comment">// This is done last so it doesn't matter in case the</span><span class="token comment">// thread is killed</span><span class="token comment">// 线程组数量+1</span>ngroups<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="设置最大优先级"><a href="#设置最大优先级" class="headerlink" title="设置最大优先级"></a>设置最大优先级</h4><p>new一个线程组时, 默认复制父线程组的优先级, 调用setMaxPriority(int pri)可以手动设置线程组的最大优先级, 下面看一下源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setMaxPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> pri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ngroupsSnapshot<span class="token punctuation">;</span><span class="token class-name">ThreadGroup</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupsSnapshot<span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小于1, 大于10不做修改</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pri <span class="token operator">&lt;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY <span class="token operator">||</span> pri <span class="token operator">></span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 保证不大于父线程的最大优先级</span>maxPriority <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>pri<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>maxPriority<span class="token punctuation">)</span> <span class="token operator">:</span> pri<span class="token punctuation">;</span>ngroupsSnapshot <span class="token operator">=</span> ngroups<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groups <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>groups<span class="token punctuation">,</span> ngroupsSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 为每个子线程组都设置最大优先级</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ngroupsSnapshot <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groupsSnapshot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setMaxPriority</span><span class="token punctuation">(</span>pri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="销毁一个线程组"><a href="#销毁一个线程组" class="headerlink" title="销毁一个线程组"></a>销毁一个线程组</h4><p>如果线程组已经销毁或线程组中还存在线程抛出异常.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ngroupsSnapshot<span class="token punctuation">;</span><span class="token class-name">ThreadGroup</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupsSnapshot<span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>destroyed <span class="token operator">||</span> <span class="token punctuation">(</span>nthreads <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ngroupsSnapshot <span class="token operator">=</span> ngroups<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groups <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>groups<span class="token punctuation">,</span> ngroupsSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 清空当前线程组状态</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>destroyed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>ngroups <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>groups <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>nthreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>threads <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 销毁所有子线程组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ngroupsSnapshot <span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groupsSnapshot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从父线程组中移除</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断是否是指定线程组的子线程组"><a href="#判断是否是指定线程组的子线程组" class="headerlink" title="判断是否是指定线程组的子线程组"></a>判断是否是指定线程组的子线程组</h4><p>调用parentOf()方法判断是否是指定线程组的子线程: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parentOf</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> g <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span> g <span class="token operator">=</span> g<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取线程组中激活线程的数量"><a href="#获取线程组中激活线程的数量" class="headerlink" title="获取线程组中激活线程的数量"></a>获取线程组中激活线程的数量</h4><ul><li>int activeCount()  调用activCount()方法可以估计激活线程的数量(包含子线程组中线程), 该值仅是近似值.</li></ul><h4 id="获取线程组的激活线程"><a href="#获取线程组的激活线程" class="headerlink" title="获取线程组的激活线程"></a>获取线程组的激活线程</h4><p>获取激活线程, 如果给定参数的list长度小于激活线程数, 则其他激活线程将不会复制到list中.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 该方法会获取当前线程组及其子线程组的所有几号线程</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// recurse为false时仅列出当前线程组的激活线程, 不包含子线程组</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span> recurse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> recurse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> list<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recurse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ngroupsSnapshot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">ThreadGroup</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupsSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>destroyed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> nt <span class="token operator">=</span> nthreads<span class="token punctuation">;</span>        <span class="token comment">// 仅复制给定list.length数量的激活线程, 其他将忽略</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nt <span class="token operator">></span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>nt <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ngroupsSnapshot <span class="token operator">=</span> ngroups<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>groups <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>groups<span class="token punctuation">,</span> ngroupsSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>groupsSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ngroupsSnapshot <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n <span class="token operator">=</span> groupsSnapshot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一些属性get方法"><a href="#一些属性get方法" class="headerlink" title="一些属性get方法"></a>一些属性get方法</h4><ul><li>String getName() 获取当前线程组的名称</li><li>ThreadGroup getParent() 获取当前线程组的父线程组</li><li>int getMaxPriority() 获取当前线程组最大优先级</li><li>boolean isDaemon() 当前线程组是否是守护线程组 </li><li>boolean isDestroyed() 当前线程组是否已销毁</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基础</title>
      <link href="2021/02/22/java/concurrent/thread_base/"/>
      <url>2021/02/22/java/concurrent/thread_base/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>程序: 能够完成一定任务或者功能的代码集合, 时指令和数据的有序集合, 是一段静态代码.<br>进程: 就是应用程序在内存中分配的空间, 即正在运行的程序. 进程是操作系统分配资源的基本单位.<br>线程: 线程是操作系统调度的基本单位.  </p><h3 id="进程和线程区别"><a href="#进程和线程区别" class="headerlink" title="进程和线程区别"></a>进程和线程区别</h3><p>进程是一个独立运行的环境, 线程是进程中执行的一个任务. 本质区别是是否单独战友内存地址空间以及其他系统资源.  </p><ul><li>进程单独战友内存地址空间, 进程间存在内存隔离, 数据共享复杂, 同步简单, 各个进程间互不干扰; 线程共享所属进程的内存地址空间和资源, 数据共享简单, 但是同步复杂.</li><li>一个进程出现问题不会影响其他进程; 一个线程崩溃可能导致整个进程奔溃.</li><li>进程的创建销毁不仅需要保存寄存器和栈信息, 还需要资源分配回收级页调度, 开销较大; 线程只需要保存寄存器和栈信息, 开销较小.</li><li>进程是操作系统进行资源分配的基本单位, 线程是操作系统进行调度的基本单位.</li></ul><h2 id="java多线程类与接口"><a href="#java多线程类与接口" class="headerlink" title="java多线程类与接口"></a>java多线程类与接口</h2><h3 id="Thread及Runnable"><a href="#Thread及Runnable" class="headerlink" title="Thread及Runnable"></a>Thread及Runnable</h3><h4 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h4><p>继承Thread类: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Run my thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NB: </p><blockquote><p>调用run()方法不会创建新的线程, 仅是直接执行run()方法. 调用start()方法创建一个线程.<br>多次调用start()方法会抛出IllegalThreadStateException异常.</p></blockquote><h4 id="Thread类的构造方法"><a href="#Thread类的构造方法" class="headerlink" title="Thread类的构造方法"></a>Thread类的构造方法</h4><p><code>Thread</code>类实现了<code>Runnable</code>接口, 查看其构造方法, 发现其核心调用了init方法.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                  <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>init 参数:</p><ul><li>g: 线程组, 指定该线程所属线程组.</li><li>target: 需要执行的任务.</li><li>name: 线程的名称</li><li>stackSize: 期望的线程栈大小, 未指定默认0, 但是具体大小还是由jvm实现来决定, 有些jvm的实现会忽略该参数.</li><li>acc: 用于初始化inheritedAccessControlContext变量.</li><li>inheritThreadLocals: 可继承的ThreadLocal.如果为true, 从构造线程中继承初始化参数到可继承的thread-locals中.</li></ul><h4 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h4><ul><li>currentThread(): 返回当前正在执行的线程对象的引用.</li><li>start(): 开始执行线程的方法, java虚拟机会调用线程内的run()方法.</li><li>yield(): 提示调度器当前线程想要放弃当前处理器的占用(调度器可能会忽略该提示). 即使调用该方法, 也有可能继续运行该线程.</li><li>sleep(): 使当前线程睡眠一段时间.</li><li>join(): 使当前线程等待另一个线程执行完毕后再继续执行, 内部调用了Object类的wait方法.</li></ul><h4 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h4><blockquote><p>由于Runnable是函数式接口, 可以直接使用lambda表达式进行实现.</p></blockquote><p>Runnable定义: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Computes a result, or throws an exception if unable to do so.     *     * @return computed result     * @throws Exception if unable to compute a result     */</span>    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现Runnable接口: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassImpl Running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda running..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Callable-Future及FutureTask"><a href="#Callable-Future及FutureTask" class="headerlink" title="Callable, Future及FutureTask"></a>Callable, Future及FutureTask</h3><blockquote><p>Runnable与Thread创建线程无返回值; 使用Callable与Future可以创建有返回的线程.</p></blockquote><h4 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h4><blockquote><p>Callable也是一个函数式接口. 有返回值, 且支持泛型.  </p></blockquote><p>Callable定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Computes a result, or throws an exception if unable to do so.     *     * @return computed result     * @throws Exception if unable to compute a result     */</span>    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Callable实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"callable result."</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用的是 &lt;T> Future&lt;T> submit(Callable&lt;T> task):</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NB:<br>res.get()会阻塞当前线程, 直到得到结果. 可以使用其有超时时间的get()方法.</p><h4 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h4><p>Future定义: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试取消当前任务的执行. 可能会因任务已完成, 已取消或者其他原因导致取消失败. mayInterruptIfRunning表示是否以中断方式取消线程执行. 执行完该方法后, isDone()方法将会永远返回true. 如果该方法返回true, 那么isCancelled()方法总是返回true.</span>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 等待线程返回计算结果, 阻塞.</span>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>    <span class="token comment">// 在指定时间内等待计算结果. timeout: 最大等待时间, unit: 时间单位</span>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h4><blockquote><p>FutrueTask类实现了RunnableFuture接口, RunnableFuture接口同时继承了Runnable接口和Future接口.  </p></blockquote><p>RunnableFuture接口定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Sets this Future to the result of its computation     * unless it has been cancelled.     */</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FutureTask是JDK提供的一个Future接口实现, 方便我们调用.</p><p>FutureTask例子:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用的是 Future&lt;?> submit(Runnable task);</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> submit <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不会得到返回值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地址空间</title>
      <link href="2021/02/22/os/address_space/"/>
      <url>2021/02/22/os/address_space/</url>
      
        <content type="html"><![CDATA[<h2 id="地址空间-address-space"><a href="#地址空间-address-space" class="headerlink" title="地址空间(address space)"></a>地址空间(address space)</h2><blockquote><p>物理内存抽象  </p></blockquote><p>虚拟化内存, 使得应用程序认为其加载到特定的内存地址, 并独享非常大的地址空间.  </p><h3 id="关键问题-如何虚拟化内存"><a href="#关键问题-如何虚拟化内存" class="headerlink" title="关键问题: 如何虚拟化内存?"></a>关键问题: 如何虚拟化内存?</h3><pre class="line-numbers language-none"><code class="language-none">操作系统如何在单一的物理内存上为多个运行的进程构建一个私有的, 可能很大的地址空间抽象.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li>透明, 程序不应该感知到内存被虚拟化的事实, 使其认为有独享的私有物理内存.</li><li>效率, 操作系统应该在时间和空间上追求尽可能的高效. 为了实现高效, 通常需要硬件功能的支持(例如TLB).</li><li>保护, 操作系统要确保进程受到保护, 不会受其他进程影响, 操作系统也不会受进程影响. 一个进程不应该访问其本身以外的内存地址空间. 保护为进程提供了隔离性, 每个进程都在自己独立的环境中运行, 避免其他出错或恶意进程的影响.</li></ol><h2 id="机制-地址转换-address-translation"><a href="#机制-地址转换-address-translation" class="headerlink" title="机制: 地址转换(address translation)"></a>机制: 地址转换(address translation)</h2><blockquote><p>将虚拟地址转换为物理地址.  </p></blockquote><p>实现cpu虚拟化时, 我们遵循了受限直接访问(Limited Direct Execution, LDE). LDE的基本思想是: 允许程序运行大部分指令直接访问硬件, 只在一些关键点(如进程发生系统调用或发生时钟中断), 由操作系统接入来确保”在正确的时间, 正确的地点, 做正确的事情”. 为了实现高效的虚拟化, 操作系统尽量让程序自己运行, 同时通过在关键点的及时介入(interposing), 来保持对硬件的控制. 高效和控制是现代操作系统的两个主要的目标.</p><p>实现虚拟内存时, 也使用相似的策略, 在实现高效和控制的同时, 提供期望的虚拟化. 高效决定了需要硬件的支持, 一些简单的寄存器, TLB, 页表等. 控制表示操作系统确保应用程序只能访问他自己的内存空间. 同时还需要确保灵活性, 期望程序能以任何方式访问他自己的地址空间.</p><pre class="line-numbers language-none"><code class="language-none">关键问题: 高效,灵活地虚拟化内存如何高效实现内存虚拟化? 如何提供应用程序所需的灵活性? 如何控制应用程序可访问的内存位置, 从而确保程序的内存访问受到合理的限制? 如何高效的实现这一切?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="动态-基于硬件-重定位-基址界限-base-and-bound"><a href="#动态-基于硬件-重定位-基址界限-base-and-bound" class="headerlink" title="动态(基于硬件)重定位: 基址界限(base and bound)"></a>动态(基于硬件)重定位: 基址界限(base and bound)</h3><p>cpu 需要两个寄存器: 基址寄存器和界限寄存器. 进程使用的地址都是虚拟地址, 为了得到物理内存地址, 需要加上base寄存器内容:<br>$$ physical \ address = virtual \ address + base $$</p><p>如果内存超过bound界限则抛出异常. 有两种方式检查(逻辑上是等价的):</p><ol><li>在虚拟地址和基址寄存器内容求和之前检查.</li><li>虚拟地址和基址寄存器求和之后检查.</li></ol><p>由于地址重定位发生于运行时, 也称为动态重定位.</p><p>base和bound寄存器是芯片中的硬件结构, 每个cpu中存在一对. 也将cpu中负责内存地址转换的部分称为Memory management unit(MMU, 内存管理单元).   </p><h4 id="硬件支持"><a href="#硬件支持" class="headerlink" title="硬件支持"></a>硬件支持</h4><ol><li>与cpu虚拟化相同, 我们需要两种cpu模式. 特权模式(privileged mode, 也成内核模式, kernel mode), 可以访问整个机器资源. 用户模式(user mode), 只能做有限的操作.  </li><li>硬件必须提供基址和界限寄存器(base and bounds register), 因此每个cpu的内存管理单元都需要这两个额外的寄存器. 硬件必须能检查地址是否可用, 通过界限寄存器和cpu的一些电路实现.  </li><li>硬件还需提供一些特殊的指令, 用于修改基址寄存器和界限寄存器, 允许操作系统在切换进程时改变他们. 这些指令是特权指令, 只有在内核模式下使用.</li><li>最后, 用户程序试图非法访问内存(越界访问时), cpu必须能够产生异常.同时安排操作系统进行异常处理. cpu需要提供方法通知处理异常程序的位置, 因此需要另外的一些特权指令.</li></ol><table><thead><tr><th>硬件要求</th><th>解释</th></tr></thead><tbody><tr><td>特权模式</td><td>以防用户模式的进程执行特权操作</td></tr><tr><td>基址/界限寄存器</td><td>每个cpu需要一堆寄存器支持地址转换和界限检查</td></tr><tr><td>修改基址/界限寄存器的特权指令</td><td>用户程序运行前, 操作系统需要设置这些值</td></tr><tr><td>注册异常处理的特权指令</td><td>操作系统需通知硬件发生异常执行的代码</td></tr><tr><td>能够触发异常</td><td>进程试图使用特权指令或越界的内存</td></tr></tbody></table><h4 id="操作系统支持"><a href="#操作系统支持" class="headerlink" title="操作系统支持"></a>操作系统支持</h4><ol><li>进程创建时, 操作系统必须为进程的地址空间寻找合适的物理内存空间. 假设鼎城的地址空间小于物理内存,且大小相同. 操作系统可将物理内存看成一组槽块, 标记空间或已用. 当创建新进程时, 查找该数据结构(常称空闲列表, free list), 为新地址空间查找位置.</li><li>进程终止时, 操作系统应该回收其所有内存. 将内存放回空闲列表, 并根据需求清除相关的数据结构.</li><li>上下文切换时, 由于每个cpu只有同一个基址寄存器和一个界限寄存器. 对于每个进程来说, 他们的值都不相同, 操作系统必须保存和恢复基址和界限寄存器. 所以当操作系统决定中止当前进程时, 需要将当前的基址和界限寄存器保存在内存中, 放入每个进程都有的结构中, 例如进程控制块(PCB). 操作系统恢复执行(或首次)进程时, 也必须给基址和界限寄存器设置正确的值.</li></ol><table><thead><tr><th>操作系统要求</th><th>解释</th></tr></thead><tbody><tr><td>内存管理</td><td>新进程分配内存  终止进程回收内存  通常通过空闲列表管理</td></tr><tr><td>基址/界限管理</td><td>上线文切换时正确设置基址/界限寄存器</td></tr><tr><td>异常处理</td><td>异常发生时执行的代码</td></tr></tbody></table><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>基址界限寄存器, 会导致有一大块的空闲空间.</p><pre class="line-numbers language-none"><code class="language-none">关键问题: 怎样支持大地址空间如何支持大地址空间, 同时栈和堆之间有大量的空闲空间?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="分段-泛化的基址-界限"><a href="#分段-泛化的基址-界限" class="headerlink" title="分段: 泛化的基址/界限"></a>分段: 泛化的基址/界限</h4>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> 内存虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个数组的交集</title>
      <link href="2021/02/20/algorithm/349_intersection_of_two_arrays/"/>
      <url>2021/02/20/algorithm/349_intersection_of_two_arrays/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-349"><a href="#题目-leetcode-349" class="headerlink" title="题目(leetcode-349)"></a>题目(<a href="https://leetcode.com/problems/intersection-of-two-arrays/">leetcode-349</a>)</h2><p>给定两个数组, 计算他们的交集.<br>结果中的元素必须是唯一的, 结果可以是任意顺序.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Example 1:Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]Output: [2]Example 2:Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]Output: [9,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>利用set减少时间复杂度.</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> nums2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> nums2 <span class="token keyword">if</span> i <span class="token keyword">in</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">useSetApi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">useMap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> nums2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变位词</title>
      <link href="2021/02/20/algorithm/242_valid_anagram/"/>
      <url>2021/02/20/algorithm/242_valid_anagram/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-242"><a href="#题目-leetcode-242" class="headerlink" title="题目(leetcode-242)"></a>题目(<a href="https://leetcode.com/problems/valid-anagram/">leetcode-242</a>)</h2><p>给定两个字符串s, t, 判断t是否是s的变位词(即t是由s中的字符重新排序组成).<br>假定字符串中只包含小写字母.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Example 1:Input: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;Output: trueExample 2:Input: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于只有小写字母, 可以使用数组记录每个字符出现的次数.<br>也可以使用map记录字母出现的次数</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> t <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            lst<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            lst<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">usingMap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> t <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            d<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">for</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lst<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            lst<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> lst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中环的入口</title>
      <link href="2021/02/18/algorithm/142_lincked_list_cycle_2/"/>
      <url>2021/02/18/algorithm/142_lincked_list_cycle_2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-142"><a href="#题目-leetcode-142" class="headerlink" title="题目(leetcode-142)"></a>题目(<a href="https://leetcode.com/problems/linked-list-cycle-ii/">leetcode-142</a>)</h2><p>给定一个链表, 返回链表环的起始位置节点. 如果没有环, 返回null.<br>例:<br><img src="https://cdn.jsdelivr.net/gh/in-a-day/cdn@main/images/leetcode/142/q_1.png" alt="q1" loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1Output: tail connects to node index 1Explanation: 链表的第二个节点是环的入口, 返回第二个节点.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先判断链表是否有环, 无环返回null即可.<br>下面来看有环的情况:<br>假设有两个人在环形操场跑步, a 速度是b 速度的2倍, 若两人同时同地出发, 则a跑完两圈, b刚好跑完一圈相遇. 若a在b的前面位置出发, 则b尚未跑完一圈时, 两人相遇.<br>则可使用双指针判断是否有环, 慢指针slow一次走一步, 快指针fast一次走两步.若两个指针相遇代表链表有环.<br>设链表头结点到环起始位置的距离为s1, 环起始位置到指针相遇位置的距离为s2, 相遇位置到环的起始位置距离为s3.<br>由上面分析可知, 当slow进入环后, slow指针最多只可能绕环一圈, 所以$s_{slow} = s1 + s2$. 由于fast的速度是slow的两倍, 所以$s_{fast} = 2 * (s1 + s2)$.<br>链表长度未知,且环的位置位置, 所以在slow指针尚未进入环中时, fast指针可能已经绕环n圈.则$s_{fast} = s1 + n * (s2 + s3) + s2$.<br>综上:</p><ol><li>$s_{slow} = s1 + s2$</li><li>$s_{fast} =  2 * (s1 + s2)$</li><li>$s_{fast} = s1 + n * (s2 + s3) + s2$  </li></ol><p>则: </p><ol><li>$2 * (s1 + s2) = s1 + n * (s2 + s3) + s2$</li><li>$s1 = (n - 1) * (s2 + s3) + s3$<br>s1 + s2 + n1 * (s2 + s3) = s1 + n2 * (s2 + s3) + s2</li></ol><p>由上, 当fast和slow相遇时, 此时slow指针再前进长度为s3完成一次环, 由最后一个公式可得: 将fast指针指向head节点, 且slow与fast每次都走1步,则再次相遇的位置即环的起始位置(slow相遇后再走的距离刚好是$(n - 1) * (s2 + s3) + s3$).</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        slow <span class="token operator">=</span> fast <span class="token operator">=</span> head        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token comment"># 保证slow走一步fast走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> fast <span class="token operator">==</span> slow<span class="token punctuation">:</span>                <span class="token comment"># 将fast指针指向head节点</span>                fast <span class="token operator">=</span> head                <span class="token keyword">while</span> fast <span class="token operator">!=</span> head<span class="token punctuation">:</span>                    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> fast        <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>               <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fast <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> fast<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="2021/02/07/algorithm/206_reverse_linked_list/"/>
      <url>2021/02/07/algorithm/206_reverse_linked_list/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-206"><a href="#题目-leetcode-206" class="headerlink" title="题目(leetcode-206)"></a>题目(<a href="https://leetcode.com/problems/reverse-linked-list/">leetcode-206</a>)</h2><p>反转单链表.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULLOutput: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>prev <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">while</span> head<span class="token punctuation">:</span><span class="token builtin">next</span> <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev            prev <span class="token operator">=</span> head            head <span class="token operator">=</span> <span class="token builtin">next</span>    <span class="token keyword">def</span> <span class="token function">recursiveRevese</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> pre<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> pre                <span class="token builtin">next</span> <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre        pre <span class="token operator">=</span> head        <span class="token keyword">return</span> self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            prev <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计链表</title>
      <link href="2021/02/07/algorithm/707_design_linked_list/"/>
      <url>2021/02/07/algorithm/707_design_linked_list/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-707"><a href="#题目-leetcode-707" class="headerlink" title="题目(leetcode-707)"></a>题目(<a href="https://leetcode.com/problems/design-linked-list/">leetcode-707</a>)</h2><p>设计一个单向或双向链表.<br>实现MyLinkedList类:</p><ul><li>MyLinkedList() 实例化对象.</li><li>get(int index) 返回<code>index</code>位置的值. 如果index不合法, 返回 -1.</li><li>addAtHead(int val) 在头部添加节点.</li><li>addAtTail(int val) 在尾部添加节点.</li><li>addAtIndex(int index, int val) 在指定位置添加节点. 若index等于链表长度, 节点添加至最后, 若index大于链表长度, 不添加节点.</li><li>deleteAtIndex(int index) 如果index合法, 删除index节点元素.</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        """</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>_tail <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>_size <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">def</span> <span class="token function">_get_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_tail        <span class="token keyword">if</span> index <span class="token operator">==</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_tail        <span class="token keyword">if</span> index <span class="token operator">></span> self<span class="token punctuation">.</span>_size <span class="token keyword">or</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        count <span class="token operator">=</span> <span class="token number">1</span>        curr <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail        <span class="token keyword">while</span> count <span class="token operator">&lt;</span> index<span class="token punctuation">:</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> curr    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the value of the index-th node in the linked list. If the index is invalid, return -1.        """</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_node<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">:</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>val        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">def</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.        """</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_head<span class="token punctuation">:</span>            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            self<span class="token punctuation">.</span>_head<span class="token punctuation">.</span>prev <span class="token operator">=</span> node        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail <span class="token operator">=</span> node        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">def</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Append a node of value val to the last element of the linked list.        """</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_tail<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail <span class="token operator">=</span> node        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">def</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.        """</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>addAtHead<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">></span> self<span class="token punctuation">.</span>_size <span class="token keyword">or</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        insert <span class="token operator">=</span> Node<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_node<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> insert        insert<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>        insert<span class="token punctuation">.</span>prev <span class="token operator">=</span> node        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> insert        self<span class="token punctuation">.</span>_size <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Delete the index-th node in the linked list, if the index is valid.        """</span>        <span class="token keyword">if</span> index <span class="token operator">></span> self<span class="token punctuation">.</span>_size <span class="token keyword">or</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>_size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>                <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> self<span class="token punctuation">.</span>_head<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> self<span class="token punctuation">.</span>_size<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_head <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_tail <span class="token operator">=</span> self<span class="token punctuation">.</span>_tail<span class="token punctuation">.</span>prev                self<span class="token punctuation">.</span>_tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_node<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        prev <span class="token operator">=</span> node<span class="token punctuation">.</span>_prev        <span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>_next        self<span class="token punctuation">.</span>_size <span class="token operator">-=</span> <span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除链表中的元素</title>
      <link href="2021/02/07/algorithm/203_remove_linked_list_elements/"/>
      <url>2021/02/07/algorithm/203_remove_linked_list_elements/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-203"><a href="#题目-leetcode-203" class="headerlink" title="题目(leetcode-203)"></a>题目(<a href="https://leetcode.com/problems/remove-linked-list-elements/">leetcode-203</a>)</h2><p>给定一个整数链表和值val, 移除链表中值等于val的元素.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Input:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val &#x3D; 6Output: 1-&gt;2-&gt;3-&gt;4-&gt;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        curr存储当前节点, prev存储上一个值不为val的节点        1. 当前值 == val时:            a. 当前节点是头结点, 头结点移动到下一个节点            b. 当前节点不是头节点, prev节点的next设置为curr的next        2. 当前值!=val, 将prev节点设置为curr, curr设置为curr.next        """</span>        curr <span class="token operator">=</span> prev <span class="token operator">=</span> head        <span class="token keyword">while</span> curr<span class="token punctuation">:</span>            <span class="token keyword">if</span> curr<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                <span class="token comment"># 当前节点是头节点</span>                <span class="token keyword">if</span> curr <span class="token operator">==</span> head<span class="token punctuation">:</span>                    head <span class="token operator">=</span> prev <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                prev <span class="token operator">=</span> curr            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head    <span class="token keyword">def</span> <span class="token function">remove_with_fake_head</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        添加虚拟节点, 统一处理原来的头结点和其他节点        """</span>        fake_head <span class="token operator">=</span> new ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        fake_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        curr <span class="token operator">=</span> fake_head        <span class="token comment"># 当前节点是fake_head, 所以使用curr.next进行判断</span>        <span class="token keyword">while</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token comment"># 当前节点值 == val, 删除</span>            <span class="token keyword">if</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 返回真正的头结点</span>        <span class="token keyword">return</span> fake_head<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> fakeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fakeNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token class-name">ListNode</span> curr <span class="token operator">=</span> fakeNode<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> curr<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> fakeNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比例份额调度</title>
      <link href="2021/02/04/os/process_proportional_share/"/>
      <url>2021/02/04/os/process_proportional_share/</url>
      
        <content type="html"><![CDATA[<p>TODO   </p><h2 id="比例份额"><a href="#比例份额" class="headerlink" title="比例份额"></a>比例份额</h2><blockquote><p>proportional-share, 也称fair-share(公平份额). 其基本理念是: 调度器保证每个任务都拥有特定比例的cpu时间.<br>彩票调度(lottery scheduling)是比例调度的一个非常好的例子. 其基本思想是: 每隔一段时间, 举行一次彩票抽奖, 决定该运行哪个进程. 对于想要经常运行的程序, 应该给与更多的机会去赢得彩票.  </p></blockquote><p><strong>关键问题:</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 如何设计一个调度器以比例的方式共享cpu2. 这样做的关键技术是什么3. 效率如何<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="基础观念-票数代表份额"><a href="#基础观念-票数代表份额" class="headerlink" title="基础观念: 票数代表份额"></a>基础观念: 票数代表份额</h3>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> 进程调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵2</title>
      <link href="2021/02/03/algorithm/59_spiral_matrix_2/"/>
      <url>2021/02/03/algorithm/59_spiral_matrix_2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-59"><a href="#题目-leetcode-59" class="headerlink" title="题目(leetcode-59)"></a>题目(<a href="https://leetcode.com/problems/spiral-matrix-ii/">leetcode-59</a>)</h2><p>给定正整数n, 以螺旋方式生成一个<code>n x n</code>矩阵, 矩阵元素为1至$n^2$.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Input: n &#x3D; 3Output: [[1,2,3],[8,9,4],[7,6,5]]Input: n &#x3D; 1Output: [[1]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制: $1 &lt;= n &lt;= 20$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>顺时针插入: 左上-&gt;右上, 右上-&gt;右下, 右下-&gt;左下, 左下-&gt;左上</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 行列开始位置</span>        row_start<span class="token punctuation">,</span> col_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token comment"># 行列结束位置</span>        row_end<span class="token punctuation">,</span> col_end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>        <span class="token comment"># 填充的数字</span>        count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment"># 顺时针进行填充</span>        <span class="token keyword">while</span> row_start <span class="token operator">&lt;=</span> row_end <span class="token keyword">and</span> col_start <span class="token operator">&lt;=</span> col_end<span class="token punctuation">:</span>            <span class="token comment"># 左->右</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col_start<span class="token punctuation">,</span> col_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>row_start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count                count <span class="token operator">+=</span> <span class="token number">1</span>            row_start <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># 上->下</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row_start<span class="token punctuation">,</span> row_end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_end<span class="token punctuation">]</span> <span class="token operator">=</span> count                count <span class="token operator">+=</span> <span class="token number">1</span>            col_end <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># 右->左</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col_end<span class="token punctuation">,</span> col_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>row_end<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count                count <span class="token operator">+=</span> <span class="token number">1</span>            row_end <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># 下->上</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row_end<span class="token punctuation">,</span> row_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_start<span class="token punctuation">]</span> <span class="token operator">=</span> count                count <span class="token operator">+=</span> <span class="token number">1</span>            col_start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row_end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> col_end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>row_start <span class="token operator">&lt;=</span> row_end <span class="token operator">&amp;&amp;</span> col_start <span class="token operator">&lt;=</span> col_end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> col_start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> col_end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>row_start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            row_start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row_start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> row_end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_end<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            col_end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> col_end<span class="token punctuation">;</span> i <span class="token operator">>=</span> col_start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>row_end<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            row_end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row_end<span class="token punctuation">;</span> i <span class="token operator">>=</span> row_start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col_start<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            col_start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短子数组和</title>
      <link href="2021/02/01/algorithm/209_minimum_size_subarray_sum/"/>
      <url>2021/02/01/algorithm/209_minimum_size_subarray_sum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-209"><a href="#题目-leetcode-209" class="headerlink" title="题目(leetcode-209)"></a>题目(<a href="https://leetcode.com/problems/minimum-size-subarray-sum/">leetcode-209</a>)</h2><p>给定一个含有n个正整数的数组和一个正整数s, 在数组中寻找一个最小的连续子数组, 且该子数组的和&gt;=s. 如果存在返回子数组的长度, 不存在返回0.</p><p>例:</p><pre class="line-numbers language-none"><code class="language-none">Input: s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]Output: 2Explanation: [4,3] 为该子数组.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><blockquote><p>使用双指针, 时间复杂度: O(n), 空间复杂度O(1)</p></blockquote><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment"># 由于s是正整数, 所以_sum取0即可</span>        left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> _sum<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            _sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>            right <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># 当_sum >= s时, 向右滑动到_sum &lt; s</span>            <span class="token comment"># 当left == right, 此时_sum = 0, s > 0所以不会越界</span>            <span class="token keyword">while</span> _sum <span class="token operator">>=</span> s<span class="token punctuation">:</span>                res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span>                _sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">else</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> res <span class="token operator">&lt;=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> res <span class="token operator">:</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分-TODO"><a href="#二分-TODO" class="headerlink" title="二分(TODO)"></a>二分(TODO)</h3>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素</title>
      <link href="2021/02/01/algorithm/27_remove_element/"/>
      <url>2021/02/01/algorithm/27_remove_element/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-27"><a href="#题目-leetcode-27" class="headerlink" title="题目(leetcode-27)"></a>题目(<a href="https://leetcode.com/problems/remove-element/">leetcode-27</a>)</h2><p>给定一个数组和一个值val, 原地(in-place, 即不使用额外空间)移除数组中所有等于val的元素, 并返回新的长度. 数组元素的顺序可以改变, 数组剩余长度元素的值可以是任意的.<br>例:   </p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [3, 2, 2, 3], val &#x3D; 3  Output: 2, nums &#x3D; [2, 2, x, x]  Explanation: 函数只需要返回2即可, 代表数组前两个元素. 数组后两位的元素可以是任意值[2, 2, 3, 3], [2, 2, 1, 2]...  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># 首尾指针</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 最后一次循环有两种情况:</span>        <span class="token comment"># 1. nums[left] == val, 此时判断循环后的nums[left]即可</span>        <span class="token comment"># 2. nums[left] != val, 循环后left已经+1, 此时也是直接判断left的值即可</span>        <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> val <span class="token keyword">else</span> left <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">removeElement2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># 快慢指针</span>        <span class="token comment"># curr指针用于记录不等于val的元素个数</span>        curr <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 每次i != val, 就增加curr, 并将nums[i]的值赋值给nums[curr]</span>        <span class="token comment"># 就相当于新建数组, 每次i != val, 就插入新数组, 新数组index+1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>curr<span class="token punctuation">]</span> <span class="token operator">=</span> i                curr <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> curr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>curr<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找插入位置</title>
      <link href="2021/02/01/algorithm/35_search_insert_position/"/>
      <url>2021/02/01/algorithm/35_search_insert_position/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-leetcode-35"><a href="#题目-leetcode-35" class="headerlink" title="题目(leetcode-35)"></a>题目(<a href="https://leetcode.com/problems/search-insert-position/">leetcode-35</a>)</h2><p>给定一个已排序的整数数组(数组中无重复元素)和目标值, 如果目标值存在于数组中, 返回索引, 如果不存在, 返回目标值应该在数组中插入的位置.<br>例:</p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [1,3,5,6], target &#x3D; 5Output: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于数组有序可以使用二分查找.</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nums <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> low <span class="token operator">+</span> high <span class="token operator">>></span> <span class="token number">1</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> mid            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span> high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment"># 此处返回的条件是未在数组中找到与target相同的元素, 则最后一次循环(即low == high),有以下两种情况:</span>        <span class="token comment"># 1. target &lt; nums[mid], 应返回mid, 此时low == mid</span>        <span class="token comment"># 2. target > nums[mid], 应返回mid + 1, 此时low == mid + 1</span>        <span class="token keyword">return</span> low<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> low <span class="token operator">+</span> high <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> low<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程调度策略-多级反馈队列</title>
      <link href="2021/01/27/os/process_mlfq/"/>
      <url>2021/01/27/os/process_mlfq/</url>
      
        <content type="html"><![CDATA[<h2 id="MLFQ-多级反馈队列"><a href="#MLFQ-多级反馈队列" class="headerlink" title="MLFQ(多级反馈队列)"></a>MLFQ(多级反馈队列)</h2><blockquote><p>Multi-level Feedback Queue, MLFQ使用历史预测未来</p></blockquote><p>MLFQ需要解决两方面的问题: </p><ol><li>优化周转时间, 通常OS并不知道一个任务的运行时间, 而SJF, STCF都是基于已知任务运行时间的策略.</li><li>优化响应时间, RR响应时间较短, 但是周转时间比较长.</li></ol><h3 id="基础规则"><a href="#基础规则" class="headerlink" title="基础规则"></a>基础规则</h3><p>MLFQ拥有不同的队列, 每个队列都有不同的优先级. 在任意时间, 准备运行的任务在单独的队列中. MLFQ使用优先级决定将运行的任务.<br>一个队列中可能存在多个任务, 这些任务拥有相同的优先级, 在这种情况下我们使用round-robin调度策略.<br>综上, MLFQ基本规则:</p><ul><li>Rule1: If Priority(A) &gt; Priority(B), A runs.</li><li>Rule2: If priority(A) = Priority(B), A &amp; B run in RR (<a href="/2021/01/27/os/process_schedule/" title="进程调度-基础">进程调度-基础</a>).</li></ul><p>MLFQ调度的关键在于如何设置优先级. MLFQ基于观察行为改变改变任务的优先级.MLFQ从任务运行历史中学习, 并根据历史预测任务的未来行为.</p><h3 id="尝试1-如何修改优先级"><a href="#尝试1-如何修改优先级" class="headerlink" title="尝试1: 如何修改优先级"></a>尝试1: 如何修改优先级</h3><p>考虑系统中存在短时间运行的交互任务, 和长时间运行的cpu密集型(cpu-bound)任务. 尝试使用一下规则:</p><ul><li>Rule3: 每当有新任务到来, 将该任务置于最高优先级队列.</li><li>Rule4a: 任务在运行期间用完了时间片, 减少该任务的优先级.</li><li>Rule4b: 任务在时间片结束之前释放cpu, 保持该任务的优先级.</li></ul><p>存在的问题:</p><ol><li>如果存在大量交互式任务, 其他长时间运行的任务可能会处于饥饿状态.</li><li>用户可以写出程序欺骗调度器, 从而一直获得cpu使用权. 在任务的时间片用完之前, 请求I/O操作从而释放CPU, 一直获取高的优先级.</li><li>一个任务可能会一直改变其行为. cpu密集型的任务可能会转换成交互式的任务. 当前的策略无法使得这些任务与其他交互式任务一样.</li></ol><h3 id="尝试2-优先级提升"><a href="#尝试2-优先级提升" class="headerlink" title="尝试2: 优先级提升"></a>尝试2: 优先级提升</h3><p>比较简单的方法解决饥饿问题是: 周期性地提升系统所有任务的优先级. 有许多方法可以实现该目标, 这里只简单地将任务置于最高优先级队列中. 于是:</p><ul><li>Rule5: 经过某个周期S, 将系统中的所有任务移动到最高优先队列中.</li></ul><p>该规则解决了饥饿问题, 同时解决了cpu密集型任务转换成交互式任务的问题.</p><h3 id="尝试3-更好的统计"><a href="#尝试3-更好的统计" class="headerlink" title="尝试3: 更好的统计"></a>尝试3: 更好的统计</h3><p>目标: 解决调度器欺骗问题.<br>引起该问题原因是Rule4a和4b, 该规则定义了任务在时间片用完前释放cpu保持任务的优先级.<br>为了解决该问题可以在MLFQ的每个层级都使用更好的统计cpu使用时间的方法. 调度器在每个层级都记录该层级任务的运行时间, 当任务在当前层级用完了分配的时间份额, 不管该任务是一次还是多次使用完该时间份额, 就降低该任务的优先级.<br>由此, 重写Rule4a,4b:</p><ul><li>Rule4: 一旦一个任务在指定层级用完了所拥有的时间份额(不管是否释放cpu), 就降低其优先级.</li></ul><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>MLFQ重要的问题是如何参数化调度器.主要有一下几个问题:</p><ol><li>应该设置多少个队列</li><li>每个队列的时间片长度是多少</li><li>多久进行一次优先级的提升</li></ol><p>大多数的MLFQ变种都允许改变队列的时间片长度. 高优先级队列时间片长度较短, 低优先级队列时间片长度较长.  </p><p>Solaris MLFQ实现提供了一些table配置进程优先级等信息(例如时间片长度, 提升任务优先级的时间).<br>FreeBSD调度器基于进程使用cpu的时长计算任务的优先级.<br>还有一些调度器将最高级队列用于操作系统工作, 用户任务只能使用其他优先级队列. 一些系统允许用户提供建议(advice)进行优先级设置, 例如: 通过<code>nice</code>命令行工具增加或减少任务优先级.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MLFQ: 拥有多级队列, 使用反馈(feedback)决定任务的优先级. 根据任务的运行历史决定任务的优先级.<br>MLFQ规则:</p><ol><li>如果A优先级 &gt; B优先级, A运行</li><li>如果A优先级 == B优先级, 使用<code>round-robin</code>调度策略</li><li>当一个任务进入系统, 将其置于最高优先级队列</li><li>一个任务在指定层级中的时间片份额耗尽, 降低其优先级</li><li>经过某个周期S, 将所有的任务都置于最高优先级队列</li></ol><p>MLFQ对于短时间运行的任务有着和<code>SJF/STCF</code>策略相似的性能. 对于长时间运行的cpu密集型任务, 有着公平的调度.<br>使用MLFQ的操作系统: BSD UNIX及其后代, Solaris, Windows NT及后续Windows操作系统.</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> 进程调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程调度-基础</title>
      <link href="2021/01/27/os/process_schedule/"/>
      <url>2021/01/27/os/process_schedule/</url>
      
        <content type="html"><![CDATA[<h2 id="调度指标"><a href="#调度指标" class="headerlink" title="调度指标"></a>调度指标</h2><ol><li>周转时间(turnaroud time): 任务到达系统到执行结束的时间<br>$$ T_{周转时间} = T_{完成时间} - T_{到达时间} $$</li><li>响应时间(response time): 任务到达系统到首次运行的时间<br>$$ T_{响应时间} = T_{首次运行} - T_{达到时间} $$</li></ol><h2 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h2><h3 id="FIFO-先进先出"><a href="#FIFO-先进先出" class="headerlink" title="FIFO(先进先出)"></a>FIFO(先进先出)</h3><blockquote><p>First In First Out, 也称先到先服务(First Come Fist Served), 最先进入的任务先执行.</p></blockquote><h3 id="SJF-最短任务优先"><a href="#SJF-最短任务优先" class="headerlink" title="SJF(最短任务优先)"></a>SJF(最短任务优先)</h3><blockquote><p>Shortest Job First</p></blockquote><ul><li>非抢占式, 任务时长最短的任务先执行, 前提是知道任务运行时间, 如果任务同时到达, 且以周转时间作为指标来说, 该策略最优.</li></ul><h3 id="STCF-最短完成时间优先"><a href="#STCF-最短完成时间优先" class="headerlink" title="STCF(最短完成时间优先)"></a>STCF(最短完成时间优先)</h3><blockquote><p>Shortest Time-to-Completion First, 又称抢占式最短作业优先(Preemptive Shortest Job First, PSJF). 完成时间最短的任务先执行.</p></blockquote><ul><li>任务在不同时间达到, 且以周转时间作为指标来说, 该策略最优.</li></ul><h3 id="Round-Robin-RR-时间片轮转"><a href="#Round-Robin-RR-时间片轮转" class="headerlink" title="Round-Robin(RR, 时间片轮转)"></a>Round-Robin(RR, 时间片轮转)</h3><blockquote><p>在一个时间片(time slice, aka. shceduling quantum)内运行一个任务, 时间片结束后切换到下一个任务, 而不是运行一个任务直到结束.</p></blockquote><p>时间片长度对RR至关重要. 时间片越短, RR的响应时间越短, 但是上下文切换的成本将影响整体的性能. 利用amortizatioin(摊销)技术来摊销上下文切换的成本(设置适当的时间片长度).  </p><p>RR对于响应时间十分友好, 而对于周转时间来说RR是一个是分糟糕的策略.</p>]]></content>
      
      
      <categories>
          
          <category> os </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> 进程调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="2021/01/19/design-pattern/singleton/"/>
      <url>2021/01/19/design-pattern/singleton/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>保证一个类只有一个实例.</p></blockquote><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>最佳实现方式. 提供了反序列化机制.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="静态域"><a href="#静态域" class="headerlink" title="静态域"></a>静态域</h3><p>通过反射<code>AccessibleObject.setAccessible</code>方法仍可以调用私有构造器.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><p>同样可以通过反射调用私有构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内部静态类"><a href="#内部静态类" class="headerlink" title="内部静态类"></a>内部静态类</h3><p>实现懒加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> gof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂</title>
      <link href="2021/01/19/design-pattern/abstract_factory/"/>
      <url>2021/01/19/design-pattern/abstract_factory/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>提供创建一系列相关对象的接口, 而不必指定具体的类.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> gof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造器模式</title>
      <link href="2021/01/19/design-pattern/builder/"/>
      <url>2021/01/19/design-pattern/builder/</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><blockquote><p>将复杂对象的表示与其构造分离, 以便同样的构造过程可以创建不同的表示.<br>通常构造函数有大量参数时, 使用Builder模式进行构造该对象.</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>构造一个卡通人物.</p><ul><li><p>Cartoon类及Builder</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cartoon</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weigth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Cartoon</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> builder<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> builder<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weigth <span class="token operator">=</span> builder<span class="token punctuation">.</span>weigth<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> builder<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> weigth<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            retrun <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            retrun <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>            retrun <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>            retrun <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">sex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            retrun <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Cartoon</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            retrun <span class="token keyword">new</span> <span class="token class-name">Cartoon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cartoon<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">120.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="Java示例"><a href="#Java示例" class="headerlink" title="Java示例"></a>Java示例</h3><p><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.long.StringBuilder</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://java-design-patterns.com/patterns/builder/">java-design-patterns</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> gof </tag>
            
            <tag> 创建型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="2021/01/18/design-pattern/facotry/"/>
      <url>2021/01/18/design-pattern/facotry/</url>
      
        <content type="html"><![CDATA[<blockquote><p>又称简单工厂, 静态工厂方法.</p></blockquote><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>提供封装在工厂类中的静态方法, 隐藏创建对象的实现逻辑, 使用者仅需关心对象的使用信息而不是对象的实例化.</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>通过music工厂创建music</p></blockquote><ul><li><p>music接口及其实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Music</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jazz</span> <span class="token keyword">implements</span> <span class="token class-name">Music</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TYPE <span class="token operator">=</span> <span class="token string">"JAZZ MUSIC"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> TYPE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token keyword">implements</span> <span class="token class-name">Music</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TYPE <span class="token operator">=</span> <span class="token string">"ROCK MUSIC"</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> TYPE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举Music的类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MusicType</span> <span class="token punctuation">&#123;</span>    <span class="token function">JAZZ</span><span class="token punctuation">(</span><span class="token class-name">Jazz</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ROCK</span><span class="token punctuation">(</span><span class="token class-name">Rock</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Music</span><span class="token punctuation">></span></span> constructor<span class="token punctuation">;</span>    <span class="token class-name">MusicType</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Music</span><span class="token punctuation">></span></span> constructor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> constructor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Music</span><span class="token punctuation">></span></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建Music的工厂MusicFactory</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MusicFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Music</span> <span class="token function">getMusic</span><span class="token punctuation">(</span><span class="token class-name">MusicType</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端使用代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> jazz <span class="token operator">=</span> <span class="token class-name">MusicFactory</span><span class="token punctuation">.</span><span class="token function">getMusic</span><span class="token punctuation">(</span><span class="token class-name">MusicType</span><span class="token punctuation">.</span>JAZZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rock <span class="token operator">=</span> <span class="token class-name">MusicFactory</span><span class="token punctuation">.</span><span class="token function">getMusic</span><span class="token punctuation">(</span><span class="token class-name">MusicType</span><span class="token punctuation">.</span>ROCK<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jazz<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>rock<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">JAZZ TYPEROCK TYPE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> gof </tag>
            
            <tag> 创建型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="2021/01/18/spring/begin/"/>
      <url>2021/01/18/spring/begin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基本数据类型</title>
      <link href="2021/01/18/java/base/data_type/"/>
      <url>2021/01/18/java/base/data_type/</url>
      
        <content type="html"><![CDATA[<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>类型</th><th>大小</th></tr></thead><tbody><tr><td>boolean</td><td>true, false</td></tr><tr><td>byte</td><td>8bit, [-128, 127]</td></tr><tr><td>char</td><td>unsigned 16bit, $ [0, 2^{16}-1] $</td></tr><tr><td>short</td><td>16bit, $ [$-$2^{15}, 2^{15}-1] $</td></tr><tr><td>int</td><td>32bit, $ [$-$2^{31}, 2^{31}-1] $</td></tr><tr><td>long</td><td>64bit, $ [$-$2^{65}, 2^{65}-1] $</td></tr><tr><td>float</td><td>32bit</td></tr><tr><td>double</td><td>64bit</td></tr></tbody></table><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><table><thead><tr><th>基本类型</th><th>包装类型</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><blockquote><p>Java自动装箱通过包装类的valueOf()方法实现. 自动拆箱通过包装类对象的xxxValue()实现.</p></blockquote><p><strong>NB: Java三目运算符如果同时存在基本类型和包装类型会进行自动拆箱操作.</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 自动拆箱抛出null pointer异常, Integer.valueOf(a.intValue())</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token comment">// 自动拆箱抛出null pointer异常, Integer.valueOf(a.intValue())</span><span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包装类型缓存"><a href="#包装类型缓存" class="headerlink" title="包装类型缓存"></a>包装类型缓存</h3><p>Integer 缓存: Integer类使用IntegerCache内部类进行缓存, 最大值可以通过jvm属性调整.(只有Integer支持调整最大值, 其他包装类型不支持)<br>Double 与 Float包装类不存在缓存.</p><h4 id="生成Integer方法"><a href="#生成Integer方法" class="headerlink" title="生成Integer方法"></a>生成Integer方法</h4><ol><li><p>valueOf()系列, 使用缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jdk源码</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>new Integer(), 未使用缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jdk源码</span><span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自动装箱(由于自动装箱调用的是Integer.valueOf()方法所以结果与直接调用valueOf()相同)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> e <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> f <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> g <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> h <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span><span class="token comment">// false (未修改jvm Integer类型缓存上限时)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g <span class="token operator">==</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="IntegerCache源码"><a href="#IntegerCache源码" class="headerlink" title="IntegerCache源码"></a>IntegerCache源码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">// high value may be configured by property</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// If the property cannot be parsed into an int, ignore it.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>high <span class="token operator">=</span> h<span class="token punctuation">;</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="boolean变量getter-setter规范"><a href="#boolean变量getter-setter规范" class="headerlink" title="boolean变量getter/setter规范"></a>boolean变量getter/setter规范</h3><blockquote><p>普通参数getter/setter</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyType</span><span class="token punctuation">></span></span> get<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyName</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyName</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyType</span><span class="token punctuation">></span></span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>boolean变量getter/setter</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> is<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyName</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertyName</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">boolean</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>NB: 在pojo中使用boolean不要使用isXXX形式, 使用XXX</strong></p><blockquote><p>使用isXXX形式的boolean类型在不同序列化工具中可能会产生不同的结果.</p></blockquote><h3 id="Double-Float"><a href="#Double-Float" class="headerlink" title="Double, Float"></a>Double, Float</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * A constant holding the positive infinity of type * &#123;@code double&#125;. It is equal to the value returned by * &#123;@code Double.longBitsToDouble(0x7ff0000000000000L)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> POSITIVE_INFINITY <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">/** * A constant holding the negative infinity of type * &#123;@code double&#125;. It is equal to the value returned by * &#123;@code Double.longBitsToDouble(0xfff0000000000000L)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> NEGATIVE_INFINITY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">/** * A constant holding a Not-a-Number (NaN) value of type * &#123;@code double&#125;. It is equivalent to the value returned by * &#123;@code Double.longBitsToDouble(0x7ff8000000000000L)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">NaN</span> <span class="token operator">=</span> <span class="token number">0.0d</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * A constant holding the positive infinity of type * &#123;@code float&#125;. It is equal to the value returned by * &#123;@code Float.intBitsToFloat(0x7f800000)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> POSITIVE_INFINITY <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span><span class="token comment">/** * A constant holding the negative infinity of type * &#123;@code float&#125;. It is equal to the value returned by * &#123;@code Float.intBitsToFloat(0xff800000)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> NEGATIVE_INFINITY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span><span class="token comment">/** * A constant holding a Not-a-Number (NaN) value of type * &#123;@code float&#125;.  It is equivalent to the value returned by * &#123;@code Float.intBitsToFloat(0x7fc00000)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token class-name">NaN</span> <span class="token operator">=</span> <span class="token number">0.0f</span> <span class="token operator">/</span> <span class="token number">0.0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java-base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常</title>
      <link href="2021/01/18/%E6%97%A5%E5%B8%B8/"/>
      <url>2021/01/18/%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h1><blockquote><p>我们所度过的每一个日常, 也许就是连续发生的奇迹.</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
